// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbLogin {

  /// <summary>Holder for reflection information generated from pb_login.proto</summary>
  public static partial class PbLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wYl9sb2dpbi5wcm90bxIIcGJfbG9naW4aCmJhc2UucHJvdG8aDHNoYXJl",
            "ZC5wcm90byIPCg1DMlNfSGVhcnRCZWF0Ig8KDVMyQ19IZWFydEJlYXQixwEK",
            "CEMyU19BdXRoEg8KB2FjY291bnQYASABKAkSDQoFdG9rZW4YAiABKAkSFQoN",
            "Y2xpZW50dmVyc2lvbhgLIAEoCRIWCg5zeXN0ZW1zb2Z0d2FyZRgMIAEoCRIW",
            "Cg5zeXN0ZW1oYXJkd2FyZRgNIAEoCRITCgt0ZWxlY29tb3BlchgOIAEoCRIP",
            "CgduZXR3b3JrGA8gASgJEhAKCGRldmljZWlkGBAgASgJEhAKCHBsYXRmb3Jt",
            "GBEgASgJEgoKAklQGBMgASgJIkcKCFMyQ19BdXRoEgoKAm9rGAEgASgIEg0K",
            "BWlzTmV3GAIgASgIEiAKBHVzZXIYAyABKAsyEi5iYXNlLlVzZXJCYXNlSW5m",
            "byI3ChFTMkNfRW50cmFuY2VRdWV1ZRILCgNwb3MYASABKAUSFQoNZXN0aW1h",
            "dGVkV2FpdBgCIAEoBSIeCg5DMlNfQ3JlYXRlUm9sZRIMCgRuYW1lGAEgASgJ",
            "Ij8KDlMyQ19DcmVhdGVSb2xlEgsKA3VpZBgBIAEoBRIgCgR1c2VyGAIgASgL",
            "MhIuYmFzZS5Vc2VyQmFzZUluZm8iHAoNQzJTX0VudGVyR2FtZRILCgN1aWQY",
            "ASABKAUiPwoNUzJDX0VudGVyR2FtZRIKCgJvaxgBIAEoCBIiCgh1c2VyRGF0",
            "YRgCIAEoCzIQLnNoYXJlZC5Vc2VyRGF0YUINWgtwYi9wYl9sb2dpbmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Base.BaseReflection.Descriptor, global::Shared.SharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.C2S_HeartBeat), global::PbLogin.C2S_HeartBeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.S2C_HeartBeat), global::PbLogin.S2C_HeartBeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.C2S_Auth), global::PbLogin.C2S_Auth.Parser, new[]{ "Account", "Token", "Clientversion", "Systemsoftware", "Systemhardware", "Telecomoper", "Network", "Deviceid", "Platform", "IP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.S2C_Auth), global::PbLogin.S2C_Auth.Parser, new[]{ "Ok", "IsNew", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.S2C_EntranceQueue), global::PbLogin.S2C_EntranceQueue.Parser, new[]{ "Pos", "EstimatedWait" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.C2S_CreateRole), global::PbLogin.C2S_CreateRole.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.S2C_CreateRole), global::PbLogin.S2C_CreateRole.Parser, new[]{ "Uid", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.C2S_EnterGame), global::PbLogin.C2S_EnterGame.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.S2C_EnterGame), global::PbLogin.S2C_EnterGame.Parser, new[]{ "Ok", "UserData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///心跳包
  /// </summary>
  public sealed partial class C2S_HeartBeat : pb::IMessage<C2S_HeartBeat> {
    private static readonly pb::MessageParser<C2S_HeartBeat> _parser = new pb::MessageParser<C2S_HeartBeat>(() => new C2S_HeartBeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_HeartBeat(C2S_HeartBeat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_HeartBeat Clone() {
      return new C2S_HeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_HeartBeat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_HeartBeat : pb::IMessage<S2C_HeartBeat> {
    private static readonly pb::MessageParser<S2C_HeartBeat> _parser = new pb::MessageParser<S2C_HeartBeat>(() => new S2C_HeartBeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_HeartBeat(S2C_HeartBeat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_HeartBeat Clone() {
      return new S2C_HeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_HeartBeat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///登陆认证
  /// </summary>
  public sealed partial class C2S_Auth : pb::IMessage<C2S_Auth> {
    private static readonly pb::MessageParser<C2S_Auth> _parser = new pb::MessageParser<C2S_Auth>(() => new C2S_Auth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Auth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Auth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Auth(C2S_Auth other) : this() {
      account_ = other.account_;
      token_ = other.token_;
      clientversion_ = other.clientversion_;
      systemsoftware_ = other.systemsoftware_;
      systemhardware_ = other.systemhardware_;
      telecomoper_ = other.telecomoper_;
      network_ = other.network_;
      deviceid_ = other.deviceid_;
      platform_ = other.platform_;
      iP_ = other.iP_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Auth Clone() {
      return new C2S_Auth(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientversion" field.</summary>
    public const int ClientversionFieldNumber = 11;
    private string clientversion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Clientversion {
      get { return clientversion_; }
      set {
        clientversion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemsoftware" field.</summary>
    public const int SystemsoftwareFieldNumber = 12;
    private string systemsoftware_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Systemsoftware {
      get { return systemsoftware_; }
      set {
        systemsoftware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemhardware" field.</summary>
    public const int SystemhardwareFieldNumber = 13;
    private string systemhardware_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Systemhardware {
      get { return systemhardware_; }
      set {
        systemhardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "telecomoper" field.</summary>
    public const int TelecomoperFieldNumber = 14;
    private string telecomoper_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telecomoper {
      get { return telecomoper_; }
      set {
        telecomoper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 15;
    private string network_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceid" field.</summary>
    public const int DeviceidFieldNumber = 16;
    private string deviceid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deviceid {
      get { return deviceid_; }
      set {
        deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 17;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 19;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Auth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Auth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      if (Clientversion != other.Clientversion) return false;
      if (Systemsoftware != other.Systemsoftware) return false;
      if (Systemhardware != other.Systemhardware) return false;
      if (Telecomoper != other.Telecomoper) return false;
      if (Network != other.Network) return false;
      if (Deviceid != other.Deviceid) return false;
      if (Platform != other.Platform) return false;
      if (IP != other.IP) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Clientversion.Length != 0) hash ^= Clientversion.GetHashCode();
      if (Systemsoftware.Length != 0) hash ^= Systemsoftware.GetHashCode();
      if (Systemhardware.Length != 0) hash ^= Systemhardware.GetHashCode();
      if (Telecomoper.Length != 0) hash ^= Telecomoper.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Clientversion.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Clientversion);
      }
      if (Systemsoftware.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Systemsoftware);
      }
      if (Systemhardware.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Systemhardware);
      }
      if (Telecomoper.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Telecomoper);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Network);
      }
      if (Deviceid.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Deviceid);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Platform);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(IP);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Clientversion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clientversion);
      }
      if (Systemsoftware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Systemsoftware);
      }
      if (Systemhardware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Systemhardware);
      }
      if (Telecomoper.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telecomoper);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (Deviceid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
      }
      if (Platform.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (IP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Auth other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Clientversion.Length != 0) {
        Clientversion = other.Clientversion;
      }
      if (other.Systemsoftware.Length != 0) {
        Systemsoftware = other.Systemsoftware;
      }
      if (other.Systemhardware.Length != 0) {
        Systemhardware = other.Systemhardware;
      }
      if (other.Telecomoper.Length != 0) {
        Telecomoper = other.Telecomoper;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      if (other.Deviceid.Length != 0) {
        Deviceid = other.Deviceid;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 90: {
            Clientversion = input.ReadString();
            break;
          }
          case 98: {
            Systemsoftware = input.ReadString();
            break;
          }
          case 106: {
            Systemhardware = input.ReadString();
            break;
          }
          case 114: {
            Telecomoper = input.ReadString();
            break;
          }
          case 122: {
            Network = input.ReadString();
            break;
          }
          case 130: {
            Deviceid = input.ReadString();
            break;
          }
          case 138: {
            Platform = input.ReadString();
            break;
          }
          case 154: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_Auth : pb::IMessage<S2C_Auth> {
    private static readonly pb::MessageParser<S2C_Auth> _parser = new pb::MessageParser<S2C_Auth>(() => new S2C_Auth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Auth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Auth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Auth(S2C_Auth other) : this() {
      ok_ = other.ok_;
      isNew_ = other.isNew_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Auth Clone() {
      return new S2C_Auth(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private bool ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "isNew" field.</summary>
    public const int IsNewFieldNumber = 2;
    private bool isNew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Base.UserBaseInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Base.UserBaseInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Auth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Auth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      if (IsNew != other.IsNew) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != false) hash ^= Ok.GetHashCode();
      if (IsNew != false) hash ^= IsNew.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
      if (IsNew != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsNew);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != false) {
        size += 1 + 1;
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Auth other) {
      if (other == null) {
        return;
      }
      if (other.Ok != false) {
        Ok = other.Ok;
      }
      if (other.IsNew != false) {
        IsNew = other.IsNew;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Base.UserBaseInfo();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
          case 16: {
            IsNew = input.ReadBool();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Base.UserBaseInfo();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入排队队列
  /// </summary>
  public sealed partial class S2C_EntranceQueue : pb::IMessage<S2C_EntranceQueue> {
    private static readonly pb::MessageParser<S2C_EntranceQueue> _parser = new pb::MessageParser<S2C_EntranceQueue>(() => new S2C_EntranceQueue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EntranceQueue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EntranceQueue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EntranceQueue(S2C_EntranceQueue other) : this() {
      pos_ = other.pos_;
      estimatedWait_ = other.estimatedWait_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EntranceQueue Clone() {
      return new S2C_EntranceQueue(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "estimatedWait" field.</summary>
    public const int EstimatedWaitFieldNumber = 2;
    private int estimatedWait_;
    /// <summary>
    /// 秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EstimatedWait {
      get { return estimatedWait_; }
      set {
        estimatedWait_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EntranceQueue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EntranceQueue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EstimatedWait != other.EstimatedWait) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EstimatedWait != 0) hash ^= EstimatedWait.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EstimatedWait != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EstimatedWait);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EstimatedWait != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EstimatedWait);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EntranceQueue other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EstimatedWait != 0) {
        EstimatedWait = other.EstimatedWait;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            EstimatedWait = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创角
  /// </summary>
  public sealed partial class C2S_CreateRole : pb::IMessage<C2S_CreateRole> {
    private static readonly pb::MessageParser<C2S_CreateRole> _parser = new pb::MessageParser<C2S_CreateRole>(() => new C2S_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRole(C2S_CreateRole other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRole Clone() {
      return new C2S_CreateRole(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CreateRole : pb::IMessage<S2C_CreateRole> {
    private static readonly pb::MessageParser<S2C_CreateRole> _parser = new pb::MessageParser<S2C_CreateRole>(() => new S2C_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRole(S2C_CreateRole other) : this() {
      uid_ = other.uid_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRole Clone() {
      return new S2C_CreateRole(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Base.UserBaseInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Base.UserBaseInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Base.UserBaseInfo();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Base.UserBaseInfo();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入游戏
  /// </summary>
  public sealed partial class C2S_EnterGame : pb::IMessage<C2S_EnterGame> {
    private static readonly pb::MessageParser<C2S_EnterGame> _parser = new pb::MessageParser<C2S_EnterGame>(() => new C2S_EnterGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_EnterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterGame(C2S_EnterGame other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterGame Clone() {
      return new C2S_EnterGame(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_EnterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_EnterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_EnterGame other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_EnterGame : pb::IMessage<S2C_EnterGame> {
    private static readonly pb::MessageParser<S2C_EnterGame> _parser = new pb::MessageParser<S2C_EnterGame>(() => new S2C_EnterGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EnterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterGame(S2C_EnterGame other) : this() {
      ok_ = other.ok_;
      UserData = other.userData_ != null ? other.UserData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterGame Clone() {
      return new S2C_EnterGame(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private bool ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "userData" field.</summary>
    public const int UserDataFieldNumber = 2;
    private global::Shared.UserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared.UserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EnterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EnterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      if (!object.Equals(UserData, other.UserData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != false) hash ^= Ok.GetHashCode();
      if (userData_ != null) hash ^= UserData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
      if (userData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != false) {
        size += 1 + 1;
      }
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EnterGame other) {
      if (other == null) {
        return;
      }
      if (other.Ok != false) {
        Ok = other.Ok;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::Shared.UserData();
        }
        UserData.MergeFrom(other.UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
          case 18: {
            if (userData_ == null) {
              userData_ = new global::Shared.UserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
