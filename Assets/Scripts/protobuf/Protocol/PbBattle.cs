// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbBattle {

  /// <summary>Holder for reflection information generated from pb_battle.proto</summary>
  public static partial class PbBattleReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbBattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYl9iYXR0bGUucHJvdG8SCXBiX2JhdHRsZRoPcGJfc3Bpcml0LnByb3Rv",
            "GgpiYXNlLnByb3RvImYKCkJhdHRsZVVuaXQSKAoMdXNlckJhc2VJbmZvGAEg",
            "ASgLMhIuYmFzZS5Vc2VyQmFzZUluZm8SIgoHc3Bpcml0cxgKIAMoCzIRLnBi",
            "X3NwaXJpdC5TcGlyaXQSCgoCaHAYFCABKAUiOgoQUGxheWVyQmF0dGxlSW5m",
            "bxILCgN1aWQYCiABKAUSCgoCaHAYFCABKAUSDQoFZGljZXMYHiABKAUiVAoW",
            "QmF0dGxlVW5pdENhcnJpZWRTa2lsbBILCgN1aWQYCiABKAUSLQoNY2Fycmll",
            "ZFNraWxscxgoIAMoCzIWLnBiX2JhdHRsZS5Ta2lsbEVmZmVjdCKZAQoLU2tp",
            "bGxFZmZlY3QSDwoHU2tpbGxJRBgBIAEoCRIXCg9sZWZ0QWN0aXZlUm91bmQY",
            "AiABKAUSGQoRbGVmdENvbnRpbnVlUm91bmQYAyABKAUSLAoGc3RhdHVzGAQg",
            "ASgOMhwucGJfYmF0dGxlLlNraWxsRWZmZWN0U3RhdHVzEhcKD3N0YXR1c0xl",
            "ZnRSb3VuZBgFIAEoBSLxAQoKQmF0dGxlSW5mbxIKCgJpZBgBIAEoCRIjCgR0",
            "eXBlGAIgASgOMhUucGJfYmF0dGxlLkJhdHRsZVR5cGUSEAoIcm91bmROdW0Y",
            "AyABKAUSFgoOc3BlY2lhbEVmZmVjdHMYBCADKAUSDQoFbWFwSUQYBSABKAUS",
            "JgoHcGxheWVycxgGIAMoCzIVLnBiX2JhdHRsZS5CYXR0bGVVbml0EhcKD3Jv",
            "dW5kVGltZU1heFNlYxgHIAEoBRIUCgxkZWZhdWx0RGljZXMYCiABKAUSEQoJ",
            "c3RhcnRUaW1lGBQgASgDEg8KB2VuZFRpbWUYHiABKAMilwIKD0JhdHRsZVJv",
            "dW5kSW5mbxISCgpyb3VuZEluZGV4GAogASgFEhEKCWFjdGl2ZVVJRBgUIAEo",
            "BRIlCghkaWNlSW5mbxgoIAMoCzITLnBiX2JhdHRsZS5EaWNlSW5mbxIrCglm",
            "b3JtYXRpb24YMiABKAsyGC5wYl9iYXR0bGUuRGljZUZvcm1hdGlvbhIWCg5z",
            "cGVjaWFsRWZmZWN0cxhGIAMoBRI5Cg5idUNhcnJpZWRTa2lsbBhQIAMoCzIh",
            "LnBiX2JhdHRsZS5CYXR0bGVVbml0Q2FycmllZFNraWxsEjYKEXBsYXllckJh",
            "dHRsZUluZm9zGFogAygLMhsucGJfYmF0dGxlLlBsYXllckJhdHRsZUluZm8i",
            "XQoIRGljZUluZm8SEQoJZGljZVZhbHVlGAEgASgFEiUKBnN0YXR1cxgCIAEo",
            "DjIVLnBiX2JhdHRsZS5EaWNlU3RhdHVzEhcKD3N0YXR1c0xlZnRSb3VuZBgD",
            "IAEoBSKpAQoNRGljZUZvcm1hdGlvbhItCgpmb3JtYXRUeXBlGAEgASgOMhku",
            "cGJfYmF0dGxlLkRpY2VGb3JtYXRUeXBlEjQKEWRhbWFnZVNwZWNpYWxpc3Rz",
            "GAIgAygOMhkucGJfc3Bpcml0LlNwZWNpYWxpc3RUeXBlEjMKEGVmZmVjdFNw",
            "ZWNpYWxpc3QYAyABKA4yGS5wYl9zcGlyaXQuU3BlY2lhbGlzdFR5cGUijQIK",
            "DFNwaXJpdERhbWFnZRIQCghzcGlyaXRJRBgBIAEoCRIzChBlZmZlY3RTcGVj",
            "aWFsaXN0GAIgASgOMhkucGJfc3Bpcml0LlNwZWNpYWxpc3RUeXBlEhsKE2Fj",
            "dGl2ZVNwZWNpYWxFZmZldHMYFCADKAkSLgoNZWZmZWN0UmVzdWx0cxgeIAMo",
            "CzIXLnBiX2JhdHRsZS5FZmZlY3RSZXN1bHQSEwoLYmFzaWNEYW1hZ2UYKCAB",
            "KAUSFAoMYXR0YWNrRGFtYWdlGDIgASgFEhMKC2Jsb2NrRGFtYWdlGDwgASgF",
            "EhQKDGRlZmVuY2VWYWx1ZRhGIAEoBRITCgtmaW5hbERhbWFnZRhQIAEoBSLg",
            "AwoMRWZmZWN0UmVzdWx0EhUKDXNraWxsRWZmZWN0SUQYASABKAkSHAoUZGVm",
            "ZW5jZVNraWxsRWZmZWN0SUQYAiABKAkSEQoJaXNEZWZlbmNlGAMgASgIEjMK",
            "EGVmZmVjdFNwZWNpYWxpc3QYBCABKA4yGS5wYl9zcGlyaXQuU3BlY2lhbGlz",
            "dFR5cGUSLwoKcmVzdWx0VHlwZRgFIAEoDjIbLnBiX2JhdHRsZS5FZmZlY3RS",
            "ZXN1bHRUeXBlEg8KB2Zyb21VSUQYCiABKAUSDQoFdG9VSUQYFCABKAUSFAoM",
            "ZWZmZWN0U3RyaW5nGB4gASgJEhUKDWZyb21EYW1hZ2VJbnQYKCABKAUSEwoL",
            "dG9EYW1hZ2VJbnQYKSABKAUSEQoJZnJvbUhQSW50GDIgASgFEg8KB3RvSFBJ",
            "bnQYMyABKAUSEwoLZnJvbURpY2VJbnQYPCABKAUSEQoJdG9EaWNlSW50GD0g",
            "ASgFEhMKC3RhcmdldERpY2VzGGQgAygFEhQKDHRhcmdldFNraWxscxhuIAMo",
            "CRIxCgxlZmZlY3RTb3VyY2UYeCABKA4yGy5wYl9iYXR0bGUuRWZmZWN0U291",
            "cmNlVHlwZRIWCg1zcGVjaWFsUmVzdWx0GIIBIAEoCSI8Cg9TMkNfU3RhcnRC",
            "YXR0bGUSKQoKYmF0dGxlSW5mbxgBIAEoCzIVLnBiX2JhdHRsZS5CYXR0bGVJ",
            "bmZvIhEKD0MyU19FbnRlckJhdHRsZSJGCg9TMkNfRW50ZXJCYXR0bGUSMwoP",
            "YmF0dGxlUm91bmRJbmZvGAEgASgLMhoucGJfYmF0dGxlLkJhdHRsZVJvdW5k",
            "SW5mbyImChJTMkNfQmF0dGxlQ2FuY2VsZWQSEAoIYmF0dGxlSUQYASABKAki",
            "fwoQQzJTX0JhdHRsZUFjdGlvbhISCgpyb3VuZEluZGV4GAEgASgFEi8KCmFj",
            "dGlvblR5cGUYAiABKA4yGy5wYl9iYXR0bGUuQmF0dGxlQWN0aW9uVHlwZRIT",
            "Cgtsb2NrZWREaWNlcxgKIAMoBRIRCgl0YXJnZXRVSUQYFCABKAUiEgoQUzJD",
            "X0JhdHRsZUFjdGlvbiLAAgoWUzJDX1VwZGF0ZUJhdHRsZUFjdGlvbhIRCglh",
            "Y3Rpb25VSUQYASABKAUSLwoKYWN0aW9uVHlwZRgEIAEoDjIbLnBiX2JhdHRs",
            "ZS5CYXR0bGVBY3Rpb25UeXBlEi0KDGRhbWFnZVJlc3VsdBgyIAMoCzIXLnBi",
            "X2JhdHRsZS5TcGlyaXREYW1hZ2USNgoRcGxheWVyQmF0dGxlSW5mb3MYPCAD",
            "KAsyGy5wYl9iYXR0bGUuUGxheWVyQmF0dGxlSW5mbxIWCg5zcGVjaWFsRWZm",
            "ZWN0cxhGIAMoBRIwCgxjdXJSb3VuZEluZm8YUCABKAsyGi5wYl9iYXR0bGUu",
            "QmF0dGxlUm91bmRJbmZvEjEKDW5leHRSb3VuZEluZm8YWiABKAsyGi5wYl9i",
            "YXR0bGUuQmF0dGxlUm91bmRJbmZvIioKFFMyQ19Db3VudERvd25XYXJuaW5n",
            "EhIKCmxlZnRTZWNvbmQYCiABKAUiNAoNUzJDX0JhdHRsZUVuZBIQCghiYXR0",
            "bGVJRBgBIAEoCRIRCgl3aW5uZXJVaWQYAiABKAUqSwoKQmF0dGxlVHlwZRIL",
            "CgdCVF9Ob25lEAASCgoGQlRfUFZFEAESCgoGQlRfUFZQEAISCwoHQlRfQm9z",
            "cxADEgsKB0JUX1J1c2gQBCp9Cg5EaWNlRm9ybWF0VHlwZRIMCghERlRfTm9u",
            "ZRAAEgwKCERGVF9QYWlyEAESDQoJREZUX1RocmVlEAISEQoNREZUX0ZpdmVL",
            "aW5kcxADEhEKDURGVF9GdWxsSG91c2UQBBIMCghERlRfRm91chAFEgwKCERG",
            "VF9GaXZlEAYqOwoKRGljZVN0YXR1cxINCglEU19Ob3JtYWwQABIOCgpEU19G",
            "cmVlemVkEAESDgoKRFNfQ292ZXJlZBACKkMKEVNraWxsRWZmZWN0U3RhdHVz",
            "Eg4KClNFU19Ob3JtYWwQABIPCgtTRVNfRnJlZXplZBABEg0KCVNFU19DaGFv",
            "cxACKpoBChBFZmZlY3RTb3VyY2VUeXBlEhEKDUVTVF9Ob25lU2tpbGwQABIQ",
            "CgxFU1RfUHJlU2tpbGwQChIQCgxFU1RfTmV3U2tpbGwQFBIUChBFU1RfQ2Fy",
            "cmllZFNraWxsEB4SEAoMRVNUX01hZ2ljaWFuECgSFgoSRVNUX1NwZWNpYWxF",
            "ZmZlY3RzEDISDwoLRVNUX0RlZmVuY2UQPCpiChBCYXR0bGVBY3Rpb25UeXBl",
            "EgwKCEJBVF9Jbml0EAASDAoIQkFUX1JvbGwQARIOCgpCQVRfQXR0YWNrEAIS",
            "EQoNQkFUX1N1cnJlbmRlchADEg8KC0JBVF9UaW1lb3V0EAQqagoQRWZmZWN0",
            "UmVzdWx0VHlwZRIMCghFUlRfTm9uZRAAEg4KCkVSVF9EYW1hZ2UQARIKCgZF",
            "UlRfSFAQAhIMCghFUlRfRGljZRADEg0KCUVSVF9Ta2lsbBAEEg8KC0VSVF9T",
            "cGVjaWFsEAVCDloMcGIvcGJfYmF0dGxlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbSpirit.PbSpiritReflection.Descriptor, global::Base.BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbBattle.BattleType), typeof(global::PbBattle.DiceFormatType), typeof(global::PbBattle.DiceStatus), typeof(global::PbBattle.SkillEffectStatus), typeof(global::PbBattle.EffectSourceType), typeof(global::PbBattle.BattleActionType), typeof(global::PbBattle.EffectResultType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.BattleUnit), global::PbBattle.BattleUnit.Parser, new[]{ "UserBaseInfo", "Spirits", "Hp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.PlayerBattleInfo), global::PbBattle.PlayerBattleInfo.Parser, new[]{ "Uid", "Hp", "Dices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.BattleUnitCarriedSkill), global::PbBattle.BattleUnitCarriedSkill.Parser, new[]{ "Uid", "CarriedSkills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.SkillEffect), global::PbBattle.SkillEffect.Parser, new[]{ "SkillID", "LeftActiveRound", "LeftContinueRound", "Status", "StatusLeftRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.BattleInfo), global::PbBattle.BattleInfo.Parser, new[]{ "Id", "Type", "RoundNum", "SpecialEffects", "MapID", "Players", "RoundTimeMaxSec", "DefaultDices", "StartTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.BattleRoundInfo), global::PbBattle.BattleRoundInfo.Parser, new[]{ "RoundIndex", "ActiveUID", "DiceInfo", "Formation", "SpecialEffects", "BuCarriedSkill", "PlayerBattleInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.DiceInfo), global::PbBattle.DiceInfo.Parser, new[]{ "DiceValue", "Status", "StatusLeftRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.DiceFormation), global::PbBattle.DiceFormation.Parser, new[]{ "FormatType", "DamageSpecialists", "EffectSpecialist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.SpiritDamage), global::PbBattle.SpiritDamage.Parser, new[]{ "SpiritID", "EffectSpecialist", "ActiveSpecialEffets", "EffectResults", "BasicDamage", "AttackDamage", "BlockDamage", "DefenceValue", "FinalDamage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.EffectResult), global::PbBattle.EffectResult.Parser, new[]{ "SkillEffectID", "DefenceSkillEffectID", "IsDefence", "EffectSpecialist", "ResultType", "FromUID", "ToUID", "EffectString", "FromDamageInt", "ToDamageInt", "FromHPInt", "ToHPInt", "FromDiceInt", "ToDiceInt", "TargetDices", "TargetSkills", "EffectSource", "SpecialResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_StartBattle), global::PbBattle.S2C_StartBattle.Parser, new[]{ "BattleInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_EnterBattle), global::PbBattle.C2S_EnterBattle.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_EnterBattle), global::PbBattle.S2C_EnterBattle.Parser, new[]{ "BattleRoundInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_BattleCanceled), global::PbBattle.S2C_BattleCanceled.Parser, new[]{ "BattleID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.C2S_BattleAction), global::PbBattle.C2S_BattleAction.Parser, new[]{ "RoundIndex", "ActionType", "LockedDices", "TargetUID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_BattleAction), global::PbBattle.S2C_BattleAction.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_UpdateBattleAction), global::PbBattle.S2C_UpdateBattleAction.Parser, new[]{ "ActionUID", "ActionType", "DamageResult", "PlayerBattleInfos", "SpecialEffects", "CurRoundInfo", "NextRoundInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_CountDownWarning), global::PbBattle.S2C_CountDownWarning.Parser, new[]{ "LeftSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBattle.S2C_BattleEnd), global::PbBattle.S2C_BattleEnd.Parser, new[]{ "BattleID", "WinnerUid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BattleType {
    [pbr::OriginalName("BT_None")] BtNone = 0,
    [pbr::OriginalName("BT_PVE")] BtPve = 1,
    [pbr::OriginalName("BT_PVP")] BtPvp = 2,
    [pbr::OriginalName("BT_Boss")] BtBoss = 3,
    [pbr::OriginalName("BT_Rush")] BtRush = 4,
  }

  public enum DiceFormatType {
    [pbr::OriginalName("DFT_None")] DftNone = 0,
    [pbr::OriginalName("DFT_Pair")] DftPair = 1,
    [pbr::OriginalName("DFT_Three")] DftThree = 2,
    [pbr::OriginalName("DFT_FiveKinds")] DftFiveKinds = 3,
    [pbr::OriginalName("DFT_FullHouse")] DftFullHouse = 4,
    [pbr::OriginalName("DFT_Four")] DftFour = 5,
    [pbr::OriginalName("DFT_Five")] DftFive = 6,
  }

  public enum DiceStatus {
    [pbr::OriginalName("DS_Normal")] DsNormal = 0,
    [pbr::OriginalName("DS_Freezed")] DsFreezed = 1,
    [pbr::OriginalName("DS_Covered")] DsCovered = 2,
  }

  public enum SkillEffectStatus {
    [pbr::OriginalName("SES_Normal")] SesNormal = 0,
    [pbr::OriginalName("SES_Freezed")] SesFreezed = 1,
    [pbr::OriginalName("SES_Chaos")] SesChaos = 2,
  }

  public enum EffectSourceType {
    [pbr::OriginalName("EST_NoneSkill")] EstNoneSkill = 0,
    [pbr::OriginalName("EST_PreSkill")] EstPreSkill = 10,
    [pbr::OriginalName("EST_NewSkill")] EstNewSkill = 20,
    [pbr::OriginalName("EST_CarriedSkill")] EstCarriedSkill = 30,
    [pbr::OriginalName("EST_Magician")] EstMagician = 40,
    [pbr::OriginalName("EST_SpecialEffects")] EstSpecialEffects = 50,
    [pbr::OriginalName("EST_Defence")] EstDefence = 60,
  }

  public enum BattleActionType {
    [pbr::OriginalName("BAT_Init")] BatInit = 0,
    [pbr::OriginalName("BAT_Roll")] BatRoll = 1,
    [pbr::OriginalName("BAT_Attack")] BatAttack = 2,
    [pbr::OriginalName("BAT_Surrender")] BatSurrender = 3,
    [pbr::OriginalName("BAT_Timeout")] BatTimeout = 4,
  }

  public enum EffectResultType {
    [pbr::OriginalName("ERT_None")] ErtNone = 0,
    [pbr::OriginalName("ERT_Damage")] ErtDamage = 1,
    [pbr::OriginalName("ERT_HP")] ErtHp = 2,
    [pbr::OriginalName("ERT_Dice")] ErtDice = 3,
    [pbr::OriginalName("ERT_Skill")] ErtSkill = 4,
    [pbr::OriginalName("ERT_Special")] ErtSpecial = 5,
  }

  #endregion

  #region Messages
  public sealed partial class BattleUnit : pb::IMessage<BattleUnit> {
    private static readonly pb::MessageParser<BattleUnit> _parser = new pb::MessageParser<BattleUnit>(() => new BattleUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnit(BattleUnit other) : this() {
      UserBaseInfo = other.userBaseInfo_ != null ? other.UserBaseInfo.Clone() : null;
      spirits_ = other.spirits_.Clone();
      hp_ = other.hp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnit Clone() {
      return new BattleUnit(this);
    }

    /// <summary>Field number for the "userBaseInfo" field.</summary>
    public const int UserBaseInfoFieldNumber = 1;
    private global::Base.UserBaseInfo userBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Base.UserBaseInfo UserBaseInfo {
      get { return userBaseInfo_; }
      set {
        userBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "spirits" field.</summary>
    public const int SpiritsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::PbSpirit.Spirit> _repeated_spirits_codec
        = pb::FieldCodec.ForMessage(82, global::PbSpirit.Spirit.Parser);
    private readonly pbc::RepeatedField<global::PbSpirit.Spirit> spirits_ = new pbc::RepeatedField<global::PbSpirit.Spirit>();
    /// <summary>
    ///带入战斗的精灵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSpirit.Spirit> Spirits {
      get { return spirits_; }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 20;
    private int hp_;
    /// <summary>
    ///初始生命值 不会变化	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserBaseInfo, other.UserBaseInfo)) return false;
      if(!spirits_.Equals(other.spirits_)) return false;
      if (Hp != other.Hp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userBaseInfo_ != null) hash ^= UserBaseInfo.GetHashCode();
      hash ^= spirits_.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserBaseInfo);
      }
      spirits_.WriteTo(output, _repeated_spirits_codec);
      if (Hp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Hp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBaseInfo);
      }
      size += spirits_.CalculateSize(_repeated_spirits_codec);
      if (Hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleUnit other) {
      if (other == null) {
        return;
      }
      if (other.userBaseInfo_ != null) {
        if (userBaseInfo_ == null) {
          userBaseInfo_ = new global::Base.UserBaseInfo();
        }
        UserBaseInfo.MergeFrom(other.UserBaseInfo);
      }
      spirits_.Add(other.spirits_);
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userBaseInfo_ == null) {
              userBaseInfo_ = new global::Base.UserBaseInfo();
            }
            input.ReadMessage(userBaseInfo_);
            break;
          }
          case 82: {
            spirits_.AddEntriesFrom(input, _repeated_spirits_codec);
            break;
          }
          case 160: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerBattleInfo : pb::IMessage<PlayerBattleInfo> {
    private static readonly pb::MessageParser<PlayerBattleInfo> _parser = new pb::MessageParser<PlayerBattleInfo>(() => new PlayerBattleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleInfo(PlayerBattleInfo other) : this() {
      uid_ = other.uid_;
      hp_ = other.hp_;
      dices_ = other.dices_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleInfo Clone() {
      return new PlayerBattleInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 10;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 20;
    private int hp_;
    /// <summary>
    ///随着战斗进行，会逐渐变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "dices" field.</summary>
    public const int DicesFieldNumber = 30;
    private int dices_;
    /// <summary>
    ///随着战斗进行，会逐渐变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dices {
      get { return dices_; }
      set {
        dices_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Hp != other.Hp) return false;
      if (Dices != other.Dices) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Dices != 0) hash ^= Dices.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Uid);
      }
      if (Hp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Hp);
      }
      if (Dices != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Dices);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Dices != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dices);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Dices != 0) {
        Dices = other.Dices;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            Uid = input.ReadInt32();
            break;
          }
          case 160: {
            Hp = input.ReadInt32();
            break;
          }
          case 240: {
            Dices = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleUnitCarriedSkill : pb::IMessage<BattleUnitCarriedSkill> {
    private static readonly pb::MessageParser<BattleUnitCarriedSkill> _parser = new pb::MessageParser<BattleUnitCarriedSkill>(() => new BattleUnitCarriedSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUnitCarriedSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnitCarriedSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnitCarriedSkill(BattleUnitCarriedSkill other) : this() {
      uid_ = other.uid_;
      carriedSkills_ = other.carriedSkills_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUnitCarriedSkill Clone() {
      return new BattleUnitCarriedSkill(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 10;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "carriedSkills" field.</summary>
    public const int CarriedSkillsFieldNumber = 40;
    private static readonly pb::FieldCodec<global::PbBattle.SkillEffect> _repeated_carriedSkills_codec
        = pb::FieldCodec.ForMessage(322, global::PbBattle.SkillEffect.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.SkillEffect> carriedSkills_ = new pbc::RepeatedField<global::PbBattle.SkillEffect>();
    /// <summary>
    ///携带的技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.SkillEffect> CarriedSkills {
      get { return carriedSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleUnitCarriedSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleUnitCarriedSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if(!carriedSkills_.Equals(other.carriedSkills_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      hash ^= carriedSkills_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Uid);
      }
      carriedSkills_.WriteTo(output, _repeated_carriedSkills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      size += carriedSkills_.CalculateSize(_repeated_carriedSkills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleUnitCarriedSkill other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      carriedSkills_.Add(other.carriedSkills_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            Uid = input.ReadInt32();
            break;
          }
          case 322: {
            carriedSkills_.AddEntriesFrom(input, _repeated_carriedSkills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillEffect : pb::IMessage<SkillEffect> {
    private static readonly pb::MessageParser<SkillEffect> _parser = new pb::MessageParser<SkillEffect>(() => new SkillEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEffect(SkillEffect other) : this() {
      skillID_ = other.skillID_;
      leftActiveRound_ = other.leftActiveRound_;
      leftContinueRound_ = other.leftContinueRound_;
      status_ = other.status_;
      statusLeftRound_ = other.statusLeftRound_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillEffect Clone() {
      return new SkillEffect(this);
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private string skillID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillID {
      get { return skillID_; }
      set {
        skillID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftActiveRound" field.</summary>
    public const int LeftActiveRoundFieldNumber = 2;
    private int leftActiveRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftActiveRound {
      get { return leftActiveRound_; }
      set {
        leftActiveRound_ = value;
      }
    }

    /// <summary>Field number for the "leftContinueRound" field.</summary>
    public const int LeftContinueRoundFieldNumber = 3;
    private int leftContinueRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftContinueRound {
      get { return leftContinueRound_; }
      set {
        leftContinueRound_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::PbBattle.SkillEffectStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.SkillEffectStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "statusLeftRound" field.</summary>
    public const int StatusLeftRoundFieldNumber = 5;
    private int statusLeftRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusLeftRound {
      get { return statusLeftRound_; }
      set {
        statusLeftRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillID != other.SkillID) return false;
      if (LeftActiveRound != other.LeftActiveRound) return false;
      if (LeftContinueRound != other.LeftContinueRound) return false;
      if (Status != other.Status) return false;
      if (StatusLeftRound != other.StatusLeftRound) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillID.Length != 0) hash ^= SkillID.GetHashCode();
      if (LeftActiveRound != 0) hash ^= LeftActiveRound.GetHashCode();
      if (LeftContinueRound != 0) hash ^= LeftContinueRound.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusLeftRound != 0) hash ^= StatusLeftRound.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SkillID);
      }
      if (LeftActiveRound != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftActiveRound);
      }
      if (LeftContinueRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftContinueRound);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (StatusLeftRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StatusLeftRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillID);
      }
      if (LeftActiveRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftActiveRound);
      }
      if (LeftContinueRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftContinueRound);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (StatusLeftRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusLeftRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillEffect other) {
      if (other == null) {
        return;
      }
      if (other.SkillID.Length != 0) {
        SkillID = other.SkillID;
      }
      if (other.LeftActiveRound != 0) {
        LeftActiveRound = other.LeftActiveRound;
      }
      if (other.LeftContinueRound != 0) {
        LeftContinueRound = other.LeftContinueRound;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusLeftRound != 0) {
        StatusLeftRound = other.StatusLeftRound;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SkillID = input.ReadString();
            break;
          }
          case 16: {
            LeftActiveRound = input.ReadInt32();
            break;
          }
          case 24: {
            LeftContinueRound = input.ReadInt32();
            break;
          }
          case 32: {
            status_ = (global::PbBattle.SkillEffectStatus) input.ReadEnum();
            break;
          }
          case 40: {
            StatusLeftRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleInfo : pb::IMessage<BattleInfo> {
    private static readonly pb::MessageParser<BattleInfo> _parser = new pb::MessageParser<BattleInfo>(() => new BattleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo(BattleInfo other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      roundNum_ = other.roundNum_;
      specialEffects_ = other.specialEffects_.Clone();
      mapID_ = other.mapID_;
      players_ = other.players_.Clone();
      roundTimeMaxSec_ = other.roundTimeMaxSec_;
      defaultDices_ = other.defaultDices_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo Clone() {
      return new BattleInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::PbBattle.BattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "roundNum" field.</summary>
    public const int RoundNumFieldNumber = 3;
    private int roundNum_;
    /// <summary>
    ///一场战斗最大round数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    /// <summary>Field number for the "specialEffects" field.</summary>
    public const int SpecialEffectsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_specialEffects_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> specialEffects_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpecialEffects {
      get { return specialEffects_; }
    }

    /// <summary>Field number for the "mapID" field.</summary>
    public const int MapIDFieldNumber = 5;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PbBattle.BattleUnit> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::PbBattle.BattleUnit.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.BattleUnit> players_ = new pbc::RepeatedField<global::PbBattle.BattleUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.BattleUnit> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "roundTimeMaxSec" field.</summary>
    public const int RoundTimeMaxSecFieldNumber = 7;
    private int roundTimeMaxSec_;
    /// <summary>
    ///每一个round的最长时间（秒数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTimeMaxSec {
      get { return roundTimeMaxSec_; }
      set {
        roundTimeMaxSec_ = value;
      }
    }

    /// <summary>Field number for the "defaultDices" field.</summary>
    public const int DefaultDicesFieldNumber = 10;
    private int defaultDices_;
    /// <summary>
    ///默认对局筛子数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDices {
      get { return defaultDices_; }
      set {
        defaultDices_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 20;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 30;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (RoundNum != other.RoundNum) return false;
      if(!specialEffects_.Equals(other.specialEffects_)) return false;
      if (MapID != other.MapID) return false;
      if(!players_.Equals(other.players_)) return false;
      if (RoundTimeMaxSec != other.RoundTimeMaxSec) return false;
      if (DefaultDices != other.DefaultDices) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RoundNum != 0) hash ^= RoundNum.GetHashCode();
      hash ^= specialEffects_.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      hash ^= players_.GetHashCode();
      if (RoundTimeMaxSec != 0) hash ^= RoundTimeMaxSec.GetHashCode();
      if (DefaultDices != 0) hash ^= DefaultDices.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (RoundNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoundNum);
      }
      specialEffects_.WriteTo(output, _repeated_specialEffects_codec);
      if (MapID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MapID);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (RoundTimeMaxSec != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoundTimeMaxSec);
      }
      if (DefaultDices != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DefaultDices);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundNum);
      }
      size += specialEffects_.CalculateSize(_repeated_specialEffects_codec);
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (RoundTimeMaxSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTimeMaxSec);
      }
      if (DefaultDices != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultDices);
      }
      if (StartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RoundNum != 0) {
        RoundNum = other.RoundNum;
      }
      specialEffects_.Add(other.specialEffects_);
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      players_.Add(other.players_);
      if (other.RoundTimeMaxSec != 0) {
        RoundTimeMaxSec = other.RoundTimeMaxSec;
      }
      if (other.DefaultDices != 0) {
        DefaultDices = other.DefaultDices;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::PbBattle.BattleType) input.ReadEnum();
            break;
          }
          case 24: {
            RoundNum = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            specialEffects_.AddEntriesFrom(input, _repeated_specialEffects_codec);
            break;
          }
          case 40: {
            MapID = input.ReadInt32();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 56: {
            RoundTimeMaxSec = input.ReadInt32();
            break;
          }
          case 80: {
            DefaultDices = input.ReadInt32();
            break;
          }
          case 160: {
            StartTime = input.ReadInt64();
            break;
          }
          case 240: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleRoundInfo : pb::IMessage<BattleRoundInfo> {
    private static readonly pb::MessageParser<BattleRoundInfo> _parser = new pb::MessageParser<BattleRoundInfo>(() => new BattleRoundInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundInfo(BattleRoundInfo other) : this() {
      roundIndex_ = other.roundIndex_;
      activeUID_ = other.activeUID_;
      diceInfo_ = other.diceInfo_.Clone();
      Formation = other.formation_ != null ? other.Formation.Clone() : null;
      specialEffects_ = other.specialEffects_.Clone();
      buCarriedSkill_ = other.buCarriedSkill_.Clone();
      playerBattleInfos_ = other.playerBattleInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundInfo Clone() {
      return new BattleRoundInfo(this);
    }

    /// <summary>Field number for the "roundIndex" field.</summary>
    public const int RoundIndexFieldNumber = 10;
    private int roundIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundIndex {
      get { return roundIndex_; }
      set {
        roundIndex_ = value;
      }
    }

    /// <summary>Field number for the "activeUID" field.</summary>
    public const int ActiveUIDFieldNumber = 20;
    private int activeUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveUID {
      get { return activeUID_; }
      set {
        activeUID_ = value;
      }
    }

    /// <summary>Field number for the "diceInfo" field.</summary>
    public const int DiceInfoFieldNumber = 40;
    private static readonly pb::FieldCodec<global::PbBattle.DiceInfo> _repeated_diceInfo_codec
        = pb::FieldCodec.ForMessage(322, global::PbBattle.DiceInfo.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.DiceInfo> diceInfo_ = new pbc::RepeatedField<global::PbBattle.DiceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.DiceInfo> DiceInfo {
      get { return diceInfo_; }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 50;
    private global::PbBattle.DiceFormation formation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.DiceFormation Formation {
      get { return formation_; }
      set {
        formation_ = value;
      }
    }

    /// <summary>Field number for the "specialEffects" field.</summary>
    public const int SpecialEffectsFieldNumber = 70;
    private static readonly pb::FieldCodec<int> _repeated_specialEffects_codec
        = pb::FieldCodec.ForInt32(562);
    private readonly pbc::RepeatedField<int> specialEffects_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpecialEffects {
      get { return specialEffects_; }
    }

    /// <summary>Field number for the "buCarriedSkill" field.</summary>
    public const int BuCarriedSkillFieldNumber = 80;
    private static readonly pb::FieldCodec<global::PbBattle.BattleUnitCarriedSkill> _repeated_buCarriedSkill_codec
        = pb::FieldCodec.ForMessage(642, global::PbBattle.BattleUnitCarriedSkill.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.BattleUnitCarriedSkill> buCarriedSkill_ = new pbc::RepeatedField<global::PbBattle.BattleUnitCarriedSkill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.BattleUnitCarriedSkill> BuCarriedSkill {
      get { return buCarriedSkill_; }
    }

    /// <summary>Field number for the "playerBattleInfos" field.</summary>
    public const int PlayerBattleInfosFieldNumber = 90;
    private static readonly pb::FieldCodec<global::PbBattle.PlayerBattleInfo> _repeated_playerBattleInfos_codec
        = pb::FieldCodec.ForMessage(722, global::PbBattle.PlayerBattleInfo.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.PlayerBattleInfo> playerBattleInfos_ = new pbc::RepeatedField<global::PbBattle.PlayerBattleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.PlayerBattleInfo> PlayerBattleInfos {
      get { return playerBattleInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundIndex != other.RoundIndex) return false;
      if (ActiveUID != other.ActiveUID) return false;
      if(!diceInfo_.Equals(other.diceInfo_)) return false;
      if (!object.Equals(Formation, other.Formation)) return false;
      if(!specialEffects_.Equals(other.specialEffects_)) return false;
      if(!buCarriedSkill_.Equals(other.buCarriedSkill_)) return false;
      if(!playerBattleInfos_.Equals(other.playerBattleInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
      if (ActiveUID != 0) hash ^= ActiveUID.GetHashCode();
      hash ^= diceInfo_.GetHashCode();
      if (formation_ != null) hash ^= Formation.GetHashCode();
      hash ^= specialEffects_.GetHashCode();
      hash ^= buCarriedSkill_.GetHashCode();
      hash ^= playerBattleInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RoundIndex);
      }
      if (ActiveUID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ActiveUID);
      }
      diceInfo_.WriteTo(output, _repeated_diceInfo_codec);
      if (formation_ != null) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(Formation);
      }
      specialEffects_.WriteTo(output, _repeated_specialEffects_codec);
      buCarriedSkill_.WriteTo(output, _repeated_buCarriedSkill_codec);
      playerBattleInfos_.WriteTo(output, _repeated_playerBattleInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
      }
      if (ActiveUID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveUID);
      }
      size += diceInfo_.CalculateSize(_repeated_diceInfo_codec);
      if (formation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Formation);
      }
      size += specialEffects_.CalculateSize(_repeated_specialEffects_codec);
      size += buCarriedSkill_.CalculateSize(_repeated_buCarriedSkill_codec);
      size += playerBattleInfos_.CalculateSize(_repeated_playerBattleInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRoundInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoundIndex != 0) {
        RoundIndex = other.RoundIndex;
      }
      if (other.ActiveUID != 0) {
        ActiveUID = other.ActiveUID;
      }
      diceInfo_.Add(other.diceInfo_);
      if (other.formation_ != null) {
        if (formation_ == null) {
          formation_ = new global::PbBattle.DiceFormation();
        }
        Formation.MergeFrom(other.Formation);
      }
      specialEffects_.Add(other.specialEffects_);
      buCarriedSkill_.Add(other.buCarriedSkill_);
      playerBattleInfos_.Add(other.playerBattleInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            RoundIndex = input.ReadInt32();
            break;
          }
          case 160: {
            ActiveUID = input.ReadInt32();
            break;
          }
          case 322: {
            diceInfo_.AddEntriesFrom(input, _repeated_diceInfo_codec);
            break;
          }
          case 402: {
            if (formation_ == null) {
              formation_ = new global::PbBattle.DiceFormation();
            }
            input.ReadMessage(formation_);
            break;
          }
          case 562:
          case 560: {
            specialEffects_.AddEntriesFrom(input, _repeated_specialEffects_codec);
            break;
          }
          case 642: {
            buCarriedSkill_.AddEntriesFrom(input, _repeated_buCarriedSkill_codec);
            break;
          }
          case 722: {
            playerBattleInfos_.AddEntriesFrom(input, _repeated_playerBattleInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiceInfo : pb::IMessage<DiceInfo> {
    private static readonly pb::MessageParser<DiceInfo> _parser = new pb::MessageParser<DiceInfo>(() => new DiceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo(DiceInfo other) : this() {
      diceValue_ = other.diceValue_;
      status_ = other.status_;
      statusLeftRound_ = other.statusLeftRound_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo Clone() {
      return new DiceInfo(this);
    }

    /// <summary>Field number for the "diceValue" field.</summary>
    public const int DiceValueFieldNumber = 1;
    private int diceValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiceValue {
      get { return diceValue_; }
      set {
        diceValue_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::PbBattle.DiceStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.DiceStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "statusLeftRound" field.</summary>
    public const int StatusLeftRoundFieldNumber = 3;
    private int statusLeftRound_;
    /// <summary>
    /// Only used for non-normal status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusLeftRound {
      get { return statusLeftRound_; }
      set {
        statusLeftRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiceValue != other.DiceValue) return false;
      if (Status != other.Status) return false;
      if (StatusLeftRound != other.StatusLeftRound) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiceValue != 0) hash ^= DiceValue.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusLeftRound != 0) hash ^= StatusLeftRound.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiceValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DiceValue);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (StatusLeftRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StatusLeftRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiceValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiceValue);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (StatusLeftRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusLeftRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.DiceValue != 0) {
        DiceValue = other.DiceValue;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusLeftRound != 0) {
        StatusLeftRound = other.StatusLeftRound;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiceValue = input.ReadInt32();
            break;
          }
          case 16: {
            status_ = (global::PbBattle.DiceStatus) input.ReadEnum();
            break;
          }
          case 24: {
            StatusLeftRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiceFormation : pb::IMessage<DiceFormation> {
    private static readonly pb::MessageParser<DiceFormation> _parser = new pb::MessageParser<DiceFormation>(() => new DiceFormation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceFormation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceFormation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceFormation(DiceFormation other) : this() {
      formatType_ = other.formatType_;
      damageSpecialists_ = other.damageSpecialists_.Clone();
      effectSpecialist_ = other.effectSpecialist_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceFormation Clone() {
      return new DiceFormation(this);
    }

    /// <summary>Field number for the "formatType" field.</summary>
    public const int FormatTypeFieldNumber = 1;
    private global::PbBattle.DiceFormatType formatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.DiceFormatType FormatType {
      get { return formatType_; }
      set {
        formatType_ = value;
      }
    }

    /// <summary>Field number for the "damageSpecialists" field.</summary>
    public const int DamageSpecialistsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbSpirit.SpecialistType> _repeated_damageSpecialists_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::PbSpirit.SpecialistType) x);
    private readonly pbc::RepeatedField<global::PbSpirit.SpecialistType> damageSpecialists_ = new pbc::RepeatedField<global::PbSpirit.SpecialistType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSpirit.SpecialistType> DamageSpecialists {
      get { return damageSpecialists_; }
    }

    /// <summary>Field number for the "effectSpecialist" field.</summary>
    public const int EffectSpecialistFieldNumber = 3;
    private global::PbSpirit.SpecialistType effectSpecialist_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbSpirit.SpecialistType EffectSpecialist {
      get { return effectSpecialist_; }
      set {
        effectSpecialist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceFormation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceFormation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FormatType != other.FormatType) return false;
      if(!damageSpecialists_.Equals(other.damageSpecialists_)) return false;
      if (EffectSpecialist != other.EffectSpecialist) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FormatType != 0) hash ^= FormatType.GetHashCode();
      hash ^= damageSpecialists_.GetHashCode();
      if (EffectSpecialist != 0) hash ^= EffectSpecialist.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FormatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FormatType);
      }
      damageSpecialists_.WriteTo(output, _repeated_damageSpecialists_codec);
      if (EffectSpecialist != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EffectSpecialist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FormatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FormatType);
      }
      size += damageSpecialists_.CalculateSize(_repeated_damageSpecialists_codec);
      if (EffectSpecialist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectSpecialist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceFormation other) {
      if (other == null) {
        return;
      }
      if (other.FormatType != 0) {
        FormatType = other.FormatType;
      }
      damageSpecialists_.Add(other.damageSpecialists_);
      if (other.EffectSpecialist != 0) {
        EffectSpecialist = other.EffectSpecialist;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            formatType_ = (global::PbBattle.DiceFormatType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            damageSpecialists_.AddEntriesFrom(input, _repeated_damageSpecialists_codec);
            break;
          }
          case 24: {
            effectSpecialist_ = (global::PbSpirit.SpecialistType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpiritDamage : pb::IMessage<SpiritDamage> {
    private static readonly pb::MessageParser<SpiritDamage> _parser = new pb::MessageParser<SpiritDamage>(() => new SpiritDamage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpiritDamage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiritDamage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiritDamage(SpiritDamage other) : this() {
      spiritID_ = other.spiritID_;
      effectSpecialist_ = other.effectSpecialist_;
      activeSpecialEffets_ = other.activeSpecialEffets_.Clone();
      effectResults_ = other.effectResults_.Clone();
      basicDamage_ = other.basicDamage_;
      attackDamage_ = other.attackDamage_;
      blockDamage_ = other.blockDamage_;
      defenceValue_ = other.defenceValue_;
      finalDamage_ = other.finalDamage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpiritDamage Clone() {
      return new SpiritDamage(this);
    }

    /// <summary>Field number for the "spiritID" field.</summary>
    public const int SpiritIDFieldNumber = 1;
    private string spiritID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpiritID {
      get { return spiritID_; }
      set {
        spiritID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effectSpecialist" field.</summary>
    public const int EffectSpecialistFieldNumber = 2;
    private global::PbSpirit.SpecialistType effectSpecialist_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbSpirit.SpecialistType EffectSpecialist {
      get { return effectSpecialist_; }
      set {
        effectSpecialist_ = value;
      }
    }

    /// <summary>Field number for the "activeSpecialEffets" field.</summary>
    public const int ActiveSpecialEffetsFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_activeSpecialEffets_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> activeSpecialEffets_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ActiveSpecialEffets {
      get { return activeSpecialEffets_; }
    }

    /// <summary>Field number for the "effectResults" field.</summary>
    public const int EffectResultsFieldNumber = 30;
    private static readonly pb::FieldCodec<global::PbBattle.EffectResult> _repeated_effectResults_codec
        = pb::FieldCodec.ForMessage(242, global::PbBattle.EffectResult.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.EffectResult> effectResults_ = new pbc::RepeatedField<global::PbBattle.EffectResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.EffectResult> EffectResults {
      get { return effectResults_; }
    }

    /// <summary>Field number for the "basicDamage" field.</summary>
    public const int BasicDamageFieldNumber = 40;
    private int basicDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BasicDamage {
      get { return basicDamage_; }
      set {
        basicDamage_ = value;
      }
    }

    /// <summary>Field number for the "attackDamage" field.</summary>
    public const int AttackDamageFieldNumber = 50;
    private int attackDamage_;
    /// <summary>
    ///攻击伤害值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackDamage {
      get { return attackDamage_; }
      set {
        attackDamage_ = value;
      }
    }

    /// <summary>Field number for the "blockDamage" field.</summary>
    public const int BlockDamageFieldNumber = 60;
    private int blockDamage_;
    /// <summary>
    ///格挡反伤值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockDamage {
      get { return blockDamage_; }
      set {
        blockDamage_ = value;
      }
    }

    /// <summary>Field number for the "defenceValue" field.</summary>
    public const int DefenceValueFieldNumber = 70;
    private int defenceValue_;
    /// <summary>
    ///防御抵消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenceValue {
      get { return defenceValue_; }
      set {
        defenceValue_ = value;
      }
    }

    /// <summary>Field number for the "finalDamage" field.</summary>
    public const int FinalDamageFieldNumber = 80;
    private int finalDamage_;
    /// <summary>
    ///最终造成对方的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalDamage {
      get { return finalDamage_; }
      set {
        finalDamage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpiritDamage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpiritDamage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpiritID != other.SpiritID) return false;
      if (EffectSpecialist != other.EffectSpecialist) return false;
      if(!activeSpecialEffets_.Equals(other.activeSpecialEffets_)) return false;
      if(!effectResults_.Equals(other.effectResults_)) return false;
      if (BasicDamage != other.BasicDamage) return false;
      if (AttackDamage != other.AttackDamage) return false;
      if (BlockDamage != other.BlockDamage) return false;
      if (DefenceValue != other.DefenceValue) return false;
      if (FinalDamage != other.FinalDamage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpiritID.Length != 0) hash ^= SpiritID.GetHashCode();
      if (EffectSpecialist != 0) hash ^= EffectSpecialist.GetHashCode();
      hash ^= activeSpecialEffets_.GetHashCode();
      hash ^= effectResults_.GetHashCode();
      if (BasicDamage != 0) hash ^= BasicDamage.GetHashCode();
      if (AttackDamage != 0) hash ^= AttackDamage.GetHashCode();
      if (BlockDamage != 0) hash ^= BlockDamage.GetHashCode();
      if (DefenceValue != 0) hash ^= DefenceValue.GetHashCode();
      if (FinalDamage != 0) hash ^= FinalDamage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpiritID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SpiritID);
      }
      if (EffectSpecialist != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EffectSpecialist);
      }
      activeSpecialEffets_.WriteTo(output, _repeated_activeSpecialEffets_codec);
      effectResults_.WriteTo(output, _repeated_effectResults_codec);
      if (BasicDamage != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(BasicDamage);
      }
      if (AttackDamage != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(AttackDamage);
      }
      if (BlockDamage != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(BlockDamage);
      }
      if (DefenceValue != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(DefenceValue);
      }
      if (FinalDamage != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(FinalDamage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpiritID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpiritID);
      }
      if (EffectSpecialist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectSpecialist);
      }
      size += activeSpecialEffets_.CalculateSize(_repeated_activeSpecialEffets_codec);
      size += effectResults_.CalculateSize(_repeated_effectResults_codec);
      if (BasicDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BasicDamage);
      }
      if (AttackDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackDamage);
      }
      if (BlockDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlockDamage);
      }
      if (DefenceValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefenceValue);
      }
      if (FinalDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FinalDamage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpiritDamage other) {
      if (other == null) {
        return;
      }
      if (other.SpiritID.Length != 0) {
        SpiritID = other.SpiritID;
      }
      if (other.EffectSpecialist != 0) {
        EffectSpecialist = other.EffectSpecialist;
      }
      activeSpecialEffets_.Add(other.activeSpecialEffets_);
      effectResults_.Add(other.effectResults_);
      if (other.BasicDamage != 0) {
        BasicDamage = other.BasicDamage;
      }
      if (other.AttackDamage != 0) {
        AttackDamage = other.AttackDamage;
      }
      if (other.BlockDamage != 0) {
        BlockDamage = other.BlockDamage;
      }
      if (other.DefenceValue != 0) {
        DefenceValue = other.DefenceValue;
      }
      if (other.FinalDamage != 0) {
        FinalDamage = other.FinalDamage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SpiritID = input.ReadString();
            break;
          }
          case 16: {
            effectSpecialist_ = (global::PbSpirit.SpecialistType) input.ReadEnum();
            break;
          }
          case 162: {
            activeSpecialEffets_.AddEntriesFrom(input, _repeated_activeSpecialEffets_codec);
            break;
          }
          case 242: {
            effectResults_.AddEntriesFrom(input, _repeated_effectResults_codec);
            break;
          }
          case 320: {
            BasicDamage = input.ReadInt32();
            break;
          }
          case 400: {
            AttackDamage = input.ReadInt32();
            break;
          }
          case 480: {
            BlockDamage = input.ReadInt32();
            break;
          }
          case 560: {
            DefenceValue = input.ReadInt32();
            break;
          }
          case 640: {
            FinalDamage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectResult : pb::IMessage<EffectResult> {
    private static readonly pb::MessageParser<EffectResult> _parser = new pb::MessageParser<EffectResult>(() => new EffectResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult(EffectResult other) : this() {
      skillEffectID_ = other.skillEffectID_;
      defenceSkillEffectID_ = other.defenceSkillEffectID_;
      isDefence_ = other.isDefence_;
      effectSpecialist_ = other.effectSpecialist_;
      resultType_ = other.resultType_;
      fromUID_ = other.fromUID_;
      toUID_ = other.toUID_;
      effectString_ = other.effectString_;
      fromDamageInt_ = other.fromDamageInt_;
      toDamageInt_ = other.toDamageInt_;
      fromHPInt_ = other.fromHPInt_;
      toHPInt_ = other.toHPInt_;
      fromDiceInt_ = other.fromDiceInt_;
      toDiceInt_ = other.toDiceInt_;
      targetDices_ = other.targetDices_.Clone();
      targetSkills_ = other.targetSkills_.Clone();
      effectSource_ = other.effectSource_;
      specialResult_ = other.specialResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult Clone() {
      return new EffectResult(this);
    }

    /// <summary>Field number for the "skillEffectID" field.</summary>
    public const int SkillEffectIDFieldNumber = 1;
    private string skillEffectID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectID {
      get { return skillEffectID_; }
      set {
        skillEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defenceSkillEffectID" field.</summary>
    public const int DefenceSkillEffectIDFieldNumber = 2;
    private string defenceSkillEffectID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefenceSkillEffectID {
      get { return defenceSkillEffectID_; }
      set {
        defenceSkillEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDefence" field.</summary>
    public const int IsDefenceFieldNumber = 3;
    private bool isDefence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefence {
      get { return isDefence_; }
      set {
        isDefence_ = value;
      }
    }

    /// <summary>Field number for the "effectSpecialist" field.</summary>
    public const int EffectSpecialistFieldNumber = 4;
    private global::PbSpirit.SpecialistType effectSpecialist_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbSpirit.SpecialistType EffectSpecialist {
      get { return effectSpecialist_; }
      set {
        effectSpecialist_ = value;
      }
    }

    /// <summary>Field number for the "resultType" field.</summary>
    public const int ResultTypeFieldNumber = 5;
    private global::PbBattle.EffectResultType resultType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.EffectResultType ResultType {
      get { return resultType_; }
      set {
        resultType_ = value;
      }
    }

    /// <summary>Field number for the "fromUID" field.</summary>
    public const int FromUIDFieldNumber = 10;
    private int fromUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromUID {
      get { return fromUID_; }
      set {
        fromUID_ = value;
      }
    }

    /// <summary>Field number for the "toUID" field.</summary>
    public const int ToUIDFieldNumber = 20;
    private int toUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToUID {
      get { return toUID_; }
      set {
        toUID_ = value;
      }
    }

    /// <summary>Field number for the "effectString" field.</summary>
    public const int EffectStringFieldNumber = 30;
    private string effectString_ = "";
    /// <summary>
    ///可能是数值，也可能是百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectString {
      get { return effectString_; }
      set {
        effectString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromDamageInt" field.</summary>
    public const int FromDamageIntFieldNumber = 40;
    private int fromDamageInt_;
    /// <summary>
    ///攻击方造成对方的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromDamageInt {
      get { return fromDamageInt_; }
      set {
        fromDamageInt_ = value;
      }
    }

    /// <summary>Field number for the "toDamageInt" field.</summary>
    public const int ToDamageIntFieldNumber = 41;
    private int toDamageInt_;
    /// <summary>
    ///防守方方造成对方的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToDamageInt {
      get { return toDamageInt_; }
      set {
        toDamageInt_ = value;
      }
    }

    /// <summary>Field number for the "fromHPInt" field.</summary>
    public const int FromHPIntFieldNumber = 50;
    private int fromHPInt_;
    /// <summary>
    ///攻击方HP变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromHPInt {
      get { return fromHPInt_; }
      set {
        fromHPInt_ = value;
      }
    }

    /// <summary>Field number for the "toHPInt" field.</summary>
    public const int ToHPIntFieldNumber = 51;
    private int toHPInt_;
    /// <summary>
    ///防守方HP变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToHPInt {
      get { return toHPInt_; }
      set {
        toHPInt_ = value;
      }
    }

    /// <summary>Field number for the "fromDiceInt" field.</summary>
    public const int FromDiceIntFieldNumber = 60;
    private int fromDiceInt_;
    /// <summary>
    ///攻击方骰子数变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromDiceInt {
      get { return fromDiceInt_; }
      set {
        fromDiceInt_ = value;
      }
    }

    /// <summary>Field number for the "toDiceInt" field.</summary>
    public const int ToDiceIntFieldNumber = 61;
    private int toDiceInt_;
    /// <summary>
    ///防守方骰子数变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToDiceInt {
      get { return toDiceInt_; }
      set {
        toDiceInt_ = value;
      }
    }

    /// <summary>Field number for the "targetDices" field.</summary>
    public const int TargetDicesFieldNumber = 100;
    private static readonly pb::FieldCodec<int> _repeated_targetDices_codec
        = pb::FieldCodec.ForInt32(802);
    private readonly pbc::RepeatedField<int> targetDices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TargetDices {
      get { return targetDices_; }
    }

    /// <summary>Field number for the "targetSkills" field.</summary>
    public const int TargetSkillsFieldNumber = 110;
    private static readonly pb::FieldCodec<string> _repeated_targetSkills_codec
        = pb::FieldCodec.ForString(882);
    private readonly pbc::RepeatedField<string> targetSkills_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TargetSkills {
      get { return targetSkills_; }
    }

    /// <summary>Field number for the "effectSource" field.</summary>
    public const int EffectSourceFieldNumber = 120;
    private global::PbBattle.EffectSourceType effectSource_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.EffectSourceType EffectSource {
      get { return effectSource_; }
      set {
        effectSource_ = value;
      }
    }

    /// <summary>Field number for the "specialResult" field.</summary>
    public const int SpecialResultFieldNumber = 130;
    private string specialResult_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialResult {
      get { return specialResult_; }
      set {
        specialResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillEffectID != other.SkillEffectID) return false;
      if (DefenceSkillEffectID != other.DefenceSkillEffectID) return false;
      if (IsDefence != other.IsDefence) return false;
      if (EffectSpecialist != other.EffectSpecialist) return false;
      if (ResultType != other.ResultType) return false;
      if (FromUID != other.FromUID) return false;
      if (ToUID != other.ToUID) return false;
      if (EffectString != other.EffectString) return false;
      if (FromDamageInt != other.FromDamageInt) return false;
      if (ToDamageInt != other.ToDamageInt) return false;
      if (FromHPInt != other.FromHPInt) return false;
      if (ToHPInt != other.ToHPInt) return false;
      if (FromDiceInt != other.FromDiceInt) return false;
      if (ToDiceInt != other.ToDiceInt) return false;
      if(!targetDices_.Equals(other.targetDices_)) return false;
      if(!targetSkills_.Equals(other.targetSkills_)) return false;
      if (EffectSource != other.EffectSource) return false;
      if (SpecialResult != other.SpecialResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillEffectID.Length != 0) hash ^= SkillEffectID.GetHashCode();
      if (DefenceSkillEffectID.Length != 0) hash ^= DefenceSkillEffectID.GetHashCode();
      if (IsDefence != false) hash ^= IsDefence.GetHashCode();
      if (EffectSpecialist != 0) hash ^= EffectSpecialist.GetHashCode();
      if (ResultType != 0) hash ^= ResultType.GetHashCode();
      if (FromUID != 0) hash ^= FromUID.GetHashCode();
      if (ToUID != 0) hash ^= ToUID.GetHashCode();
      if (EffectString.Length != 0) hash ^= EffectString.GetHashCode();
      if (FromDamageInt != 0) hash ^= FromDamageInt.GetHashCode();
      if (ToDamageInt != 0) hash ^= ToDamageInt.GetHashCode();
      if (FromHPInt != 0) hash ^= FromHPInt.GetHashCode();
      if (ToHPInt != 0) hash ^= ToHPInt.GetHashCode();
      if (FromDiceInt != 0) hash ^= FromDiceInt.GetHashCode();
      if (ToDiceInt != 0) hash ^= ToDiceInt.GetHashCode();
      hash ^= targetDices_.GetHashCode();
      hash ^= targetSkills_.GetHashCode();
      if (EffectSource != 0) hash ^= EffectSource.GetHashCode();
      if (SpecialResult.Length != 0) hash ^= SpecialResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillEffectID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SkillEffectID);
      }
      if (DefenceSkillEffectID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefenceSkillEffectID);
      }
      if (IsDefence != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDefence);
      }
      if (EffectSpecialist != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EffectSpecialist);
      }
      if (ResultType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ResultType);
      }
      if (FromUID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FromUID);
      }
      if (ToUID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ToUID);
      }
      if (EffectString.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EffectString);
      }
      if (FromDamageInt != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(FromDamageInt);
      }
      if (ToDamageInt != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(ToDamageInt);
      }
      if (FromHPInt != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(FromHPInt);
      }
      if (ToHPInt != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ToHPInt);
      }
      if (FromDiceInt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(FromDiceInt);
      }
      if (ToDiceInt != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ToDiceInt);
      }
      targetDices_.WriteTo(output, _repeated_targetDices_codec);
      targetSkills_.WriteTo(output, _repeated_targetSkills_codec);
      if (EffectSource != 0) {
        output.WriteRawTag(192, 7);
        output.WriteEnum((int) EffectSource);
      }
      if (SpecialResult.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(SpecialResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillEffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillEffectID);
      }
      if (DefenceSkillEffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefenceSkillEffectID);
      }
      if (IsDefence != false) {
        size += 1 + 1;
      }
      if (EffectSpecialist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectSpecialist);
      }
      if (ResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultType);
      }
      if (FromUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromUID);
      }
      if (ToUID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToUID);
      }
      if (EffectString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EffectString);
      }
      if (FromDamageInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FromDamageInt);
      }
      if (ToDamageInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToDamageInt);
      }
      if (FromHPInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FromHPInt);
      }
      if (ToHPInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToHPInt);
      }
      if (FromDiceInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FromDiceInt);
      }
      if (ToDiceInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToDiceInt);
      }
      size += targetDices_.CalculateSize(_repeated_targetDices_codec);
      size += targetSkills_.CalculateSize(_repeated_targetSkills_codec);
      if (EffectSource != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EffectSource);
      }
      if (SpecialResult.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecialResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectResult other) {
      if (other == null) {
        return;
      }
      if (other.SkillEffectID.Length != 0) {
        SkillEffectID = other.SkillEffectID;
      }
      if (other.DefenceSkillEffectID.Length != 0) {
        DefenceSkillEffectID = other.DefenceSkillEffectID;
      }
      if (other.IsDefence != false) {
        IsDefence = other.IsDefence;
      }
      if (other.EffectSpecialist != 0) {
        EffectSpecialist = other.EffectSpecialist;
      }
      if (other.ResultType != 0) {
        ResultType = other.ResultType;
      }
      if (other.FromUID != 0) {
        FromUID = other.FromUID;
      }
      if (other.ToUID != 0) {
        ToUID = other.ToUID;
      }
      if (other.EffectString.Length != 0) {
        EffectString = other.EffectString;
      }
      if (other.FromDamageInt != 0) {
        FromDamageInt = other.FromDamageInt;
      }
      if (other.ToDamageInt != 0) {
        ToDamageInt = other.ToDamageInt;
      }
      if (other.FromHPInt != 0) {
        FromHPInt = other.FromHPInt;
      }
      if (other.ToHPInt != 0) {
        ToHPInt = other.ToHPInt;
      }
      if (other.FromDiceInt != 0) {
        FromDiceInt = other.FromDiceInt;
      }
      if (other.ToDiceInt != 0) {
        ToDiceInt = other.ToDiceInt;
      }
      targetDices_.Add(other.targetDices_);
      targetSkills_.Add(other.targetSkills_);
      if (other.EffectSource != 0) {
        EffectSource = other.EffectSource;
      }
      if (other.SpecialResult.Length != 0) {
        SpecialResult = other.SpecialResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SkillEffectID = input.ReadString();
            break;
          }
          case 18: {
            DefenceSkillEffectID = input.ReadString();
            break;
          }
          case 24: {
            IsDefence = input.ReadBool();
            break;
          }
          case 32: {
            effectSpecialist_ = (global::PbSpirit.SpecialistType) input.ReadEnum();
            break;
          }
          case 40: {
            resultType_ = (global::PbBattle.EffectResultType) input.ReadEnum();
            break;
          }
          case 80: {
            FromUID = input.ReadInt32();
            break;
          }
          case 160: {
            ToUID = input.ReadInt32();
            break;
          }
          case 242: {
            EffectString = input.ReadString();
            break;
          }
          case 320: {
            FromDamageInt = input.ReadInt32();
            break;
          }
          case 328: {
            ToDamageInt = input.ReadInt32();
            break;
          }
          case 400: {
            FromHPInt = input.ReadInt32();
            break;
          }
          case 408: {
            ToHPInt = input.ReadInt32();
            break;
          }
          case 480: {
            FromDiceInt = input.ReadInt32();
            break;
          }
          case 488: {
            ToDiceInt = input.ReadInt32();
            break;
          }
          case 802:
          case 800: {
            targetDices_.AddEntriesFrom(input, _repeated_targetDices_codec);
            break;
          }
          case 882: {
            targetSkills_.AddEntriesFrom(input, _repeated_targetSkills_codec);
            break;
          }
          case 960: {
            effectSource_ = (global::PbBattle.EffectSourceType) input.ReadEnum();
            break;
          }
          case 1042: {
            SpecialResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_StartBattle : pb::IMessage<S2C_StartBattle> {
    private static readonly pb::MessageParser<S2C_StartBattle> _parser = new pb::MessageParser<S2C_StartBattle>(() => new S2C_StartBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_StartBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartBattle(S2C_StartBattle other) : this() {
      BattleInfo = other.battleInfo_ != null ? other.BattleInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StartBattle Clone() {
      return new S2C_StartBattle(this);
    }

    /// <summary>Field number for the "battleInfo" field.</summary>
    public const int BattleInfoFieldNumber = 1;
    private global::PbBattle.BattleInfo battleInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleInfo BattleInfo {
      get { return battleInfo_; }
      set {
        battleInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_StartBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_StartBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BattleInfo, other.BattleInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (battleInfo_ != null) hash ^= BattleInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BattleInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_StartBattle other) {
      if (other == null) {
        return;
      }
      if (other.battleInfo_ != null) {
        if (battleInfo_ == null) {
          battleInfo_ = new global::PbBattle.BattleInfo();
        }
        BattleInfo.MergeFrom(other.BattleInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleInfo_ == null) {
              battleInfo_ = new global::PbBattle.BattleInfo();
            }
            input.ReadMessage(battleInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_EnterBattle : pb::IMessage<C2S_EnterBattle> {
    private static readonly pb::MessageParser<C2S_EnterBattle> _parser = new pb::MessageParser<C2S_EnterBattle>(() => new C2S_EnterBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_EnterBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterBattle(C2S_EnterBattle other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EnterBattle Clone() {
      return new C2S_EnterBattle(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_EnterBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_EnterBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_EnterBattle other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_EnterBattle : pb::IMessage<S2C_EnterBattle> {
    private static readonly pb::MessageParser<S2C_EnterBattle> _parser = new pb::MessageParser<S2C_EnterBattle>(() => new S2C_EnterBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EnterBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterBattle(S2C_EnterBattle other) : this() {
      BattleRoundInfo = other.battleRoundInfo_ != null ? other.BattleRoundInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EnterBattle Clone() {
      return new S2C_EnterBattle(this);
    }

    /// <summary>Field number for the "battleRoundInfo" field.</summary>
    public const int BattleRoundInfoFieldNumber = 1;
    private global::PbBattle.BattleRoundInfo battleRoundInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleRoundInfo BattleRoundInfo {
      get { return battleRoundInfo_; }
      set {
        battleRoundInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EnterBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EnterBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BattleRoundInfo, other.BattleRoundInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (battleRoundInfo_ != null) hash ^= BattleRoundInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleRoundInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BattleRoundInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleRoundInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EnterBattle other) {
      if (other == null) {
        return;
      }
      if (other.battleRoundInfo_ != null) {
        if (battleRoundInfo_ == null) {
          battleRoundInfo_ = new global::PbBattle.BattleRoundInfo();
        }
        BattleRoundInfo.MergeFrom(other.BattleRoundInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleRoundInfo_ == null) {
              battleRoundInfo_ = new global::PbBattle.BattleRoundInfo();
            }
            input.ReadMessage(battleRoundInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_BattleCanceled : pb::IMessage<S2C_BattleCanceled> {
    private static readonly pb::MessageParser<S2C_BattleCanceled> _parser = new pb::MessageParser<S2C_BattleCanceled>(() => new S2C_BattleCanceled());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BattleCanceled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleCanceled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleCanceled(S2C_BattleCanceled other) : this() {
      battleID_ = other.battleID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleCanceled Clone() {
      return new S2C_BattleCanceled(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private string battleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleID {
      get { return battleID_; }
      set {
        battleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BattleCanceled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BattleCanceled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID.Length != 0) hash ^= BattleID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BattleID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BattleCanceled other) {
      if (other == null) {
        return;
      }
      if (other.BattleID.Length != 0) {
        BattleID = other.BattleID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BattleID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_BattleAction : pb::IMessage<C2S_BattleAction> {
    private static readonly pb::MessageParser<C2S_BattleAction> _parser = new pb::MessageParser<C2S_BattleAction>(() => new C2S_BattleAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BattleAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleAction(C2S_BattleAction other) : this() {
      roundIndex_ = other.roundIndex_;
      actionType_ = other.actionType_;
      lockedDices_ = other.lockedDices_.Clone();
      targetUID_ = other.targetUID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleAction Clone() {
      return new C2S_BattleAction(this);
    }

    /// <summary>Field number for the "roundIndex" field.</summary>
    public const int RoundIndexFieldNumber = 1;
    private int roundIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundIndex {
      get { return roundIndex_; }
      set {
        roundIndex_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private global::PbBattle.BattleActionType actionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "lockedDices" field.</summary>
    public const int LockedDicesFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_lockedDices_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> lockedDices_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///锁定的筛子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LockedDices {
      get { return lockedDices_; }
    }

    /// <summary>Field number for the "targetUID" field.</summary>
    public const int TargetUIDFieldNumber = 20;
    private int targetUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUID {
      get { return targetUID_; }
      set {
        targetUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BattleAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BattleAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundIndex != other.RoundIndex) return false;
      if (ActionType != other.ActionType) return false;
      if(!lockedDices_.Equals(other.lockedDices_)) return false;
      if (TargetUID != other.TargetUID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      hash ^= lockedDices_.GetHashCode();
      if (TargetUID != 0) hash ^= TargetUID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundIndex);
      }
      if (ActionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      lockedDices_.WriteTo(output, _repeated_lockedDices_codec);
      if (TargetUID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TargetUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      size += lockedDices_.CalculateSize(_repeated_lockedDices_codec);
      if (TargetUID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BattleAction other) {
      if (other == null) {
        return;
      }
      if (other.RoundIndex != 0) {
        RoundIndex = other.RoundIndex;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      lockedDices_.Add(other.lockedDices_);
      if (other.TargetUID != 0) {
        TargetUID = other.TargetUID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundIndex = input.ReadInt32();
            break;
          }
          case 16: {
            actionType_ = (global::PbBattle.BattleActionType) input.ReadEnum();
            break;
          }
          case 82:
          case 80: {
            lockedDices_.AddEntriesFrom(input, _repeated_lockedDices_codec);
            break;
          }
          case 160: {
            TargetUID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_BattleAction : pb::IMessage<S2C_BattleAction> {
    private static readonly pb::MessageParser<S2C_BattleAction> _parser = new pb::MessageParser<S2C_BattleAction>(() => new S2C_BattleAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BattleAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleAction(S2C_BattleAction other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleAction Clone() {
      return new S2C_BattleAction(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BattleAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BattleAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BattleAction other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_UpdateBattleAction : pb::IMessage<S2C_UpdateBattleAction> {
    private static readonly pb::MessageParser<S2C_UpdateBattleAction> _parser = new pb::MessageParser<S2C_UpdateBattleAction>(() => new S2C_UpdateBattleAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateBattleAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateBattleAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateBattleAction(S2C_UpdateBattleAction other) : this() {
      actionUID_ = other.actionUID_;
      actionType_ = other.actionType_;
      damageResult_ = other.damageResult_.Clone();
      playerBattleInfos_ = other.playerBattleInfos_.Clone();
      specialEffects_ = other.specialEffects_.Clone();
      CurRoundInfo = other.curRoundInfo_ != null ? other.CurRoundInfo.Clone() : null;
      NextRoundInfo = other.nextRoundInfo_ != null ? other.NextRoundInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateBattleAction Clone() {
      return new S2C_UpdateBattleAction(this);
    }

    /// <summary>Field number for the "actionUID" field.</summary>
    public const int ActionUIDFieldNumber = 1;
    private int actionUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionUID {
      get { return actionUID_; }
      set {
        actionUID_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 4;
    private global::PbBattle.BattleActionType actionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "damageResult" field.</summary>
    public const int DamageResultFieldNumber = 50;
    private static readonly pb::FieldCodec<global::PbBattle.SpiritDamage> _repeated_damageResult_codec
        = pb::FieldCodec.ForMessage(402, global::PbBattle.SpiritDamage.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.SpiritDamage> damageResult_ = new pbc::RepeatedField<global::PbBattle.SpiritDamage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.SpiritDamage> DamageResult {
      get { return damageResult_; }
    }

    /// <summary>Field number for the "playerBattleInfos" field.</summary>
    public const int PlayerBattleInfosFieldNumber = 60;
    private static readonly pb::FieldCodec<global::PbBattle.PlayerBattleInfo> _repeated_playerBattleInfos_codec
        = pb::FieldCodec.ForMessage(482, global::PbBattle.PlayerBattleInfo.Parser);
    private readonly pbc::RepeatedField<global::PbBattle.PlayerBattleInfo> playerBattleInfos_ = new pbc::RepeatedField<global::PbBattle.PlayerBattleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBattle.PlayerBattleInfo> PlayerBattleInfos {
      get { return playerBattleInfos_; }
    }

    /// <summary>Field number for the "specialEffects" field.</summary>
    public const int SpecialEffectsFieldNumber = 70;
    private static readonly pb::FieldCodec<int> _repeated_specialEffects_codec
        = pb::FieldCodec.ForInt32(562);
    private readonly pbc::RepeatedField<int> specialEffects_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpecialEffects {
      get { return specialEffects_; }
    }

    /// <summary>Field number for the "curRoundInfo" field.</summary>
    public const int CurRoundInfoFieldNumber = 80;
    private global::PbBattle.BattleRoundInfo curRoundInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleRoundInfo CurRoundInfo {
      get { return curRoundInfo_; }
      set {
        curRoundInfo_ = value;
      }
    }

    /// <summary>Field number for the "nextRoundInfo" field.</summary>
    public const int NextRoundInfoFieldNumber = 90;
    private global::PbBattle.BattleRoundInfo nextRoundInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBattle.BattleRoundInfo NextRoundInfo {
      get { return nextRoundInfo_; }
      set {
        nextRoundInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateBattleAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateBattleAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionUID != other.ActionUID) return false;
      if (ActionType != other.ActionType) return false;
      if(!damageResult_.Equals(other.damageResult_)) return false;
      if(!playerBattleInfos_.Equals(other.playerBattleInfos_)) return false;
      if(!specialEffects_.Equals(other.specialEffects_)) return false;
      if (!object.Equals(CurRoundInfo, other.CurRoundInfo)) return false;
      if (!object.Equals(NextRoundInfo, other.NextRoundInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionUID != 0) hash ^= ActionUID.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      hash ^= damageResult_.GetHashCode();
      hash ^= playerBattleInfos_.GetHashCode();
      hash ^= specialEffects_.GetHashCode();
      if (curRoundInfo_ != null) hash ^= CurRoundInfo.GetHashCode();
      if (nextRoundInfo_ != null) hash ^= NextRoundInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionUID);
      }
      if (ActionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionType);
      }
      damageResult_.WriteTo(output, _repeated_damageResult_codec);
      playerBattleInfos_.WriteTo(output, _repeated_playerBattleInfos_codec);
      specialEffects_.WriteTo(output, _repeated_specialEffects_codec);
      if (curRoundInfo_ != null) {
        output.WriteRawTag(130, 5);
        output.WriteMessage(CurRoundInfo);
      }
      if (nextRoundInfo_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(NextRoundInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionUID);
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      size += damageResult_.CalculateSize(_repeated_damageResult_codec);
      size += playerBattleInfos_.CalculateSize(_repeated_playerBattleInfos_codec);
      size += specialEffects_.CalculateSize(_repeated_specialEffects_codec);
      if (curRoundInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurRoundInfo);
      }
      if (nextRoundInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextRoundInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateBattleAction other) {
      if (other == null) {
        return;
      }
      if (other.ActionUID != 0) {
        ActionUID = other.ActionUID;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      damageResult_.Add(other.damageResult_);
      playerBattleInfos_.Add(other.playerBattleInfos_);
      specialEffects_.Add(other.specialEffects_);
      if (other.curRoundInfo_ != null) {
        if (curRoundInfo_ == null) {
          curRoundInfo_ = new global::PbBattle.BattleRoundInfo();
        }
        CurRoundInfo.MergeFrom(other.CurRoundInfo);
      }
      if (other.nextRoundInfo_ != null) {
        if (nextRoundInfo_ == null) {
          nextRoundInfo_ = new global::PbBattle.BattleRoundInfo();
        }
        NextRoundInfo.MergeFrom(other.NextRoundInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionUID = input.ReadInt32();
            break;
          }
          case 32: {
            actionType_ = (global::PbBattle.BattleActionType) input.ReadEnum();
            break;
          }
          case 402: {
            damageResult_.AddEntriesFrom(input, _repeated_damageResult_codec);
            break;
          }
          case 482: {
            playerBattleInfos_.AddEntriesFrom(input, _repeated_playerBattleInfos_codec);
            break;
          }
          case 562:
          case 560: {
            specialEffects_.AddEntriesFrom(input, _repeated_specialEffects_codec);
            break;
          }
          case 642: {
            if (curRoundInfo_ == null) {
              curRoundInfo_ = new global::PbBattle.BattleRoundInfo();
            }
            input.ReadMessage(curRoundInfo_);
            break;
          }
          case 722: {
            if (nextRoundInfo_ == null) {
              nextRoundInfo_ = new global::PbBattle.BattleRoundInfo();
            }
            input.ReadMessage(nextRoundInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CountDownWarning : pb::IMessage<S2C_CountDownWarning> {
    private static readonly pb::MessageParser<S2C_CountDownWarning> _parser = new pb::MessageParser<S2C_CountDownWarning>(() => new S2C_CountDownWarning());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CountDownWarning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CountDownWarning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CountDownWarning(S2C_CountDownWarning other) : this() {
      leftSecond_ = other.leftSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CountDownWarning Clone() {
      return new S2C_CountDownWarning(this);
    }

    /// <summary>Field number for the "leftSecond" field.</summary>
    public const int LeftSecondFieldNumber = 10;
    private int leftSecond_;
    /// <summary>
    ///倒计时剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSecond {
      get { return leftSecond_; }
      set {
        leftSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CountDownWarning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CountDownWarning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftSecond != other.LeftSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftSecond != 0) hash ^= LeftSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftSecond != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LeftSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CountDownWarning other) {
      if (other == null) {
        return;
      }
      if (other.LeftSecond != 0) {
        LeftSecond = other.LeftSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            LeftSecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_BattleEnd : pb::IMessage<S2C_BattleEnd> {
    private static readonly pb::MessageParser<S2C_BattleEnd> _parser = new pb::MessageParser<S2C_BattleEnd>(() => new S2C_BattleEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BattleEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBattle.PbBattleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleEnd(S2C_BattleEnd other) : this() {
      battleID_ = other.battleID_;
      winnerUid_ = other.winnerUid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BattleEnd Clone() {
      return new S2C_BattleEnd(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private string battleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleID {
      get { return battleID_; }
      set {
        battleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winnerUid" field.</summary>
    public const int WinnerUidFieldNumber = 2;
    private int winnerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerUid {
      get { return winnerUid_; }
      set {
        winnerUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BattleEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BattleEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      if (WinnerUid != other.WinnerUid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID.Length != 0) hash ^= BattleID.GetHashCode();
      if (WinnerUid != 0) hash ^= WinnerUid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BattleID);
      }
      if (WinnerUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleID);
      }
      if (WinnerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BattleEnd other) {
      if (other == null) {
        return;
      }
      if (other.BattleID.Length != 0) {
        BattleID = other.BattleID;
      }
      if (other.WinnerUid != 0) {
        WinnerUid = other.WinnerUid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BattleID = input.ReadString();
            break;
          }
          case 16: {
            WinnerUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
