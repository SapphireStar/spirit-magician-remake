// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Shared {

  /// <summary>Holder for reflection information generated from shared.proto</summary>
  public static partial class SharedReflection {

    #region Descriptor
    /// <summary>File descriptor for shared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzaGFyZWQucHJvdG8SBnNoYXJlZBoNa3ZzdG9yZS5wcm90bxoKYmFzZS5w",
            "cm90bxoPcGJfc3Bpcml0LnByb3RvIpkBCgZQbGF5ZXISKAoMdXNlckJhc2VJ",
            "bmZvGAEgASgLMhIuYmFzZS5Vc2VyQmFzZUluZm8SDAoEZ29sZBgKIAEoBRIP",
            "CgdkaWFtb25kGAsgASgFEgsKA2V4cBgMIAEoBRINCgVzY29yZRgUIAEoBRIY",
            "ChBhY2hpZXZlbWVudFBvaW50GB4gASgFEhAKCHJlY2hhcmdlGCggASgFIkIK",
            "BkZyaWVuZBIoCgx1c2VyQmFzZUluZm8YASABKAsyEi5iYXNlLlVzZXJCYXNl",
            "SW5mbxIOCgZvbmxpbmUYAiABKAgikwEKCFVzZXJEYXRhEh4KBnBsYXllchgB",
            "IAEoCzIOLnNoYXJlZC5QbGF5ZXISHwoHZnJpZW5kcxgCIAMoCzIOLnNoYXJl",
            "ZC5GcmllbmQSIgoHc3Bpcml0cxgDIAMoCzIRLnBiX3NwaXJpdC5TcGlyaXQS",
            "IgoIa3ZTdG9yZXMYBCABKAsyEC5zaGFyZWQuS1ZTdG9yZXMiJQoJU3RhdGlz",
            "dGljEgsKA3RpZBgBIAEoBRILCgNudW0YAiABKAUiKQoFTW9uZXkSEAoIY3Vy",
            "cmVuY3kYASABKAUSDgoGYW1vdW50GAIgASgFIucHCgdTZXR0aW5nEhQKDGlz",
            "QXV0b0JhdHRsZRgBIAEoCBIXCg9zaG93UGxheWVyTGV2ZWwYAiABKAkSGAoQ",
            "c2hvd1BsYXllclVwaGVhZBgDIAEoCBIUCgxzaG93UmVhbEhlYWQYBCABKAgS",
            "FQoNc2hvd0FsbERhbWFnZRgFIAEoCBIYChBzaG93UmVhbEJhdHRsZUJnGAYg",
            "ASgIEhYKDmF1dG9BdWRpbzJUZXh0GAcgASgFEhoKEmF1dG9QbGF5QXVkaW9X",
            "b3JsZBgIIAEoBRIZChFhdXRvUGxheUF1ZGlvVGVhbRgJIAEoBRIaChJhdXRv",
            "UGxheUF1ZGlvR3VpbGQYCiABKAUSFwoPYXV0b1BsYXlXZWF0aGVyGAsgASgI",
            "EhcKD3Nob3dXb3JsZEJ1YmJsZRgMIAEoBRIWCg5zaG93VGVhbUJ1YmJsZRgN",
            "IAEoBRIXCg9zaG93R3VpbGRCdWJibGUYDiABKAUSGQoRc2hvd1RlYW1yZXFC",
            "dWJibGUYDyABKAUSFAoMdmlkZW9RdWFsaXR5GBAgASgFEhIKCmNhbWVyYVpv",
            "b20YESABKAgSIQoZbGFzdFRTdGFtcE9mRXZlcnlEYXlMb2dpbhgSIAEoAxIb",
            "ChNldmVyeURheUxvZ2luSWRMaXN0GBMgASgJEhUKDW9uZVRpbWVJblNsb3QY",
            "FCABKAkSFgoOc2hvd0JhdHRsZUhlYWQYFSABKAgSFQoNc2hvd0JhdHRsZVRP",
            "VBgWIAEoCBIYChBhdXRvQmF0dGxlVGFyZ2V0GBcgASgIEhcKD3Nob3dCYXR0",
            "bGVQYWxIcBgYIAEoCBIZChFiYXR0bGVTa2lsbExheW91dBgZIAEoBRIXCg9r",
            "ZWVwQmFzaWNBdHRhY2sYGiABKAgSFwoPYmF0dGxlUm9ja2VyRml4GBsgASgF",
            "EhkKEWJhdHRsZVRhbGtDb250ZW50GBwgAygJEhYKDnNob3dCYXR0bGVDaGF0",
            "GB0gASgIEhkKEXNob3dCYXR0bGVQYWxOYW1lGB4gASgIEhYKDnNob3dCYXR0",
            "bGVGcm9nGB8gASgIEhkKEXNob3dCYXR0bGVPdXRsaW5lGCAgASgIEhUKDW1h",
            "bnVhbENoYW5nZWQYISABKAgSFwoPc2hvd0JhdHRsZUZvZUhwGCIgASgIEhkK",
            "EXNob3dCYXR0bGVGb2VOYW1lGCMgASgIEhoKEmhpZGVEYWlseVRhc2tFbnRy",
            "eRgkIAEoCBIYChBoaWRlQmFnUmFyZUVudHJ5GCUgASgIEg8KB3Nob3dEQk0Y",
            "JiABKAgSIAoYbGFzdENoYWxsZW5nZVRpcFNob3dUaW1lGCcgASgFIkAKDUxv",
            "Y2FsVXNlckRhdGESIAoHc2V0dGluZxgBIAEoCzIPLnNoYXJlZC5TZXR0aW5n",
            "Eg0KBWl0ZW1zGAMgAygJIgYKBFBpbmciBgoEUG9uZyIuCg1TZXJ2ZXJNZXNz",
            "YWdlEg8KB2NvbnRlbnQYASABKAkSDAoEY29kZRgLIAEoCSJRCghLVlN0b3Jl",
            "cxIiCgh0dXRvcmlhbBgBIAEoCzIQLmt2c3RvcmUuS1ZTdG9yZRIhCgdnZW5l",
            "cmljGAIgASgLMhAua3ZzdG9yZS5LVlN0b3JlQgtaCXBiL3NoYXJlZGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Kvstore.KvstoreReflection.Descriptor, global::Base.BaseReflection.Descriptor, global::PbSpirit.PbSpiritReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Player), global::Shared.Player.Parser, new[]{ "UserBaseInfo", "Gold", "Diamond", "Exp", "Score", "AchievementPoint", "Recharge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Friend), global::Shared.Friend.Parser, new[]{ "UserBaseInfo", "Online" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.UserData), global::Shared.UserData.Parser, new[]{ "Player", "Friends", "Spirits", "KvStores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Statistic), global::Shared.Statistic.Parser, new[]{ "Tid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Money), global::Shared.Money.Parser, new[]{ "Currency", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Setting), global::Shared.Setting.Parser, new[]{ "IsAutoBattle", "ShowPlayerLevel", "ShowPlayerUphead", "ShowRealHead", "ShowAllDamage", "ShowRealBattleBg", "AutoAudio2Text", "AutoPlayAudioWorld", "AutoPlayAudioTeam", "AutoPlayAudioGuild", "AutoPlayWeather", "ShowWorldBubble", "ShowTeamBubble", "ShowGuildBubble", "ShowTeamreqBubble", "VideoQuality", "CameraZoom", "LastTStampOfEveryDayLogin", "EveryDayLoginIdList", "OneTimeInSlot", "ShowBattleHead", "ShowBattleTOT", "AutoBattleTarget", "ShowBattlePalHp", "BattleSkillLayout", "KeepBasicAttack", "BattleRockerFix", "BattleTalkContent", "ShowBattleChat", "ShowBattlePalName", "ShowBattleFrog", "ShowBattleOutline", "ManualChanged", "ShowBattleFoeHp", "ShowBattleFoeName", "HideDailyTaskEntry", "HideBagRareEntry", "ShowDBM", "LastChallengeTipShowTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.LocalUserData), global::Shared.LocalUserData.Parser, new[]{ "Setting", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Ping), global::Shared.Ping.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.Pong), global::Shared.Pong.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.ServerMessage), global::Shared.ServerMessage.Parser, new[]{ "Content", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Shared.KVStores), global::Shared.KVStores.Parser, new[]{ "Tutorial", "Generic" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      UserBaseInfo = other.userBaseInfo_ != null ? other.UserBaseInfo.Clone() : null;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      exp_ = other.exp_;
      score_ = other.score_;
      achievementPoint_ = other.achievementPoint_;
      recharge_ = other.recharge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "userBaseInfo" field.</summary>
    public const int UserBaseInfoFieldNumber = 1;
    private global::Base.UserBaseInfo userBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Base.UserBaseInfo UserBaseInfo {
      get { return userBaseInfo_; }
      set {
        userBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 10;
    private int gold_;
    /// <summary>
    /// 金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 11;
    private int diamond_;
    /// <summary>
    /// 钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 12;
    private int exp_;
    /// <summary>
    ///玩家经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 20;
    private int score_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "achievementPoint" field.</summary>
    public const int AchievementPointFieldNumber = 30;
    private int achievementPoint_;
    /// <summary>
    ///玩家成就点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AchievementPoint {
      get { return achievementPoint_; }
      set {
        achievementPoint_ = value;
      }
    }

    /// <summary>Field number for the "recharge" field.</summary>
    public const int RechargeFieldNumber = 40;
    private int recharge_;
    /// <summary>
    ///累计充值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Recharge {
      get { return recharge_; }
      set {
        recharge_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserBaseInfo, other.UserBaseInfo)) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (Exp != other.Exp) return false;
      if (Score != other.Score) return false;
      if (AchievementPoint != other.AchievementPoint) return false;
      if (Recharge != other.Recharge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userBaseInfo_ != null) hash ^= UserBaseInfo.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (AchievementPoint != 0) hash ^= AchievementPoint.GetHashCode();
      if (Recharge != 0) hash ^= Recharge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserBaseInfo);
      }
      if (Gold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Diamond);
      }
      if (Exp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Exp);
      }
      if (Score != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Score);
      }
      if (AchievementPoint != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(AchievementPoint);
      }
      if (Recharge != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Recharge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBaseInfo);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Score != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (AchievementPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AchievementPoint);
      }
      if (Recharge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Recharge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.userBaseInfo_ != null) {
        if (userBaseInfo_ == null) {
          userBaseInfo_ = new global::Base.UserBaseInfo();
        }
        UserBaseInfo.MergeFrom(other.UserBaseInfo);
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.AchievementPoint != 0) {
        AchievementPoint = other.AchievementPoint;
      }
      if (other.Recharge != 0) {
        Recharge = other.Recharge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userBaseInfo_ == null) {
              userBaseInfo_ = new global::Base.UserBaseInfo();
            }
            input.ReadMessage(userBaseInfo_);
            break;
          }
          case 80: {
            Gold = input.ReadInt32();
            break;
          }
          case 88: {
            Diamond = input.ReadInt32();
            break;
          }
          case 96: {
            Exp = input.ReadInt32();
            break;
          }
          case 160: {
            Score = input.ReadInt32();
            break;
          }
          case 240: {
            AchievementPoint = input.ReadInt32();
            break;
          }
          case 320: {
            Recharge = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Friend : pb::IMessage<Friend> {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      UserBaseInfo = other.userBaseInfo_ != null ? other.UserBaseInfo.Clone() : null;
      online_ = other.online_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "userBaseInfo" field.</summary>
    public const int UserBaseInfoFieldNumber = 1;
    private global::Base.UserBaseInfo userBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Base.UserBaseInfo UserBaseInfo {
      get { return userBaseInfo_; }
      set {
        userBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 2;
    private bool online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserBaseInfo, other.UserBaseInfo)) return false;
      if (Online != other.Online) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userBaseInfo_ != null) hash ^= UserBaseInfo.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserBaseInfo);
      }
      if (Online != false) {
        output.WriteRawTag(16);
        output.WriteBool(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBaseInfo);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.userBaseInfo_ != null) {
        if (userBaseInfo_ == null) {
          userBaseInfo_ = new global::Base.UserBaseInfo();
        }
        UserBaseInfo.MergeFrom(other.UserBaseInfo);
      }
      if (other.Online != false) {
        Online = other.Online;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userBaseInfo_ == null) {
              userBaseInfo_ = new global::Base.UserBaseInfo();
            }
            input.ReadMessage(userBaseInfo_);
            break;
          }
          case 16: {
            Online = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
      friends_ = other.friends_.Clone();
      spirits_ = other.spirits_.Clone();
      KvStores = other.kvStores_ != null ? other.KvStores.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Shared.Player player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared.Player Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Shared.Friend> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(18, global::Shared.Friend.Parser);
    private readonly pbc::RepeatedField<global::Shared.Friend> friends_ = new pbc::RepeatedField<global::Shared.Friend>();
    /// <summary>
    ///好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Shared.Friend> Friends {
      get { return friends_; }
    }

    /// <summary>Field number for the "spirits" field.</summary>
    public const int SpiritsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbSpirit.Spirit> _repeated_spirits_codec
        = pb::FieldCodec.ForMessage(26, global::PbSpirit.Spirit.Parser);
    private readonly pbc::RepeatedField<global::PbSpirit.Spirit> spirits_ = new pbc::RepeatedField<global::PbSpirit.Spirit>();
    /// <summary>
    ///精灵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbSpirit.Spirit> Spirits {
      get { return spirits_; }
    }

    /// <summary>Field number for the "kvStores" field.</summary>
    public const int KvStoresFieldNumber = 4;
    private global::Shared.KVStores kvStores_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared.KVStores KvStores {
      get { return kvStores_; }
      set {
        kvStores_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if(!friends_.Equals(other.friends_)) return false;
      if(!spirits_.Equals(other.spirits_)) return false;
      if (!object.Equals(KvStores, other.KvStores)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      hash ^= friends_.GetHashCode();
      hash ^= spirits_.GetHashCode();
      if (kvStores_ != null) hash ^= KvStores.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
      spirits_.WriteTo(output, _repeated_spirits_codec);
      if (kvStores_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(KvStores);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      size += spirits_.CalculateSize(_repeated_spirits_codec);
      if (kvStores_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KvStores);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Shared.Player();
        }
        Player.MergeFrom(other.Player);
      }
      friends_.Add(other.friends_);
      spirits_.Add(other.spirits_);
      if (other.kvStores_ != null) {
        if (kvStores_ == null) {
          kvStores_ = new global::Shared.KVStores();
        }
        KvStores.MergeFrom(other.KvStores);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Shared.Player();
            }
            input.ReadMessage(player_);
            break;
          }
          case 18: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
          case 26: {
            spirits_.AddEntriesFrom(input, _repeated_spirits_codec);
            break;
          }
          case 34: {
            if (kvStores_ == null) {
              kvStores_ = new global::Shared.KVStores();
            }
            input.ReadMessage(kvStores_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 行为统计
  /// </summary>
  public sealed partial class Statistic : pb::IMessage<Statistic> {
    private static readonly pb::MessageParser<Statistic> _parser = new pb::MessageParser<Statistic>(() => new Statistic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Statistic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistic(Statistic other) : this() {
      tid_ = other.tid_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistic Clone() {
      return new Statistic(this);
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private int tid_;
    /// <summary>
    /// tid 唯一
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Statistic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Statistic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Statistic other) {
      if (other == null) {
        return;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 货币
  /// </summary>
  public sealed partial class Money : pb::IMessage<Money> {
    private static readonly pb::MessageParser<Money> _parser = new pb::MessageParser<Money>(() => new Money());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Money> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money(Money other) : this() {
      currency_ = other.currency_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money Clone() {
      return new Money(this);
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 1;
    private int currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Money);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Money other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currency != other.Currency) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Currency != 0) hash ^= Currency.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currency != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Currency);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currency);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Money other) {
      if (other == null) {
        return;
      }
      if (other.Currency != 0) {
        Currency = other.Currency;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Currency = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Setting : pb::IMessage<Setting> {
    private static readonly pb::MessageParser<Setting> _parser = new pb::MessageParser<Setting>(() => new Setting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Setting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting(Setting other) : this() {
      isAutoBattle_ = other.isAutoBattle_;
      showPlayerLevel_ = other.showPlayerLevel_;
      showPlayerUphead_ = other.showPlayerUphead_;
      showRealHead_ = other.showRealHead_;
      showAllDamage_ = other.showAllDamage_;
      showRealBattleBg_ = other.showRealBattleBg_;
      autoAudio2Text_ = other.autoAudio2Text_;
      autoPlayAudioWorld_ = other.autoPlayAudioWorld_;
      autoPlayAudioTeam_ = other.autoPlayAudioTeam_;
      autoPlayAudioGuild_ = other.autoPlayAudioGuild_;
      autoPlayWeather_ = other.autoPlayWeather_;
      showWorldBubble_ = other.showWorldBubble_;
      showTeamBubble_ = other.showTeamBubble_;
      showGuildBubble_ = other.showGuildBubble_;
      showTeamreqBubble_ = other.showTeamreqBubble_;
      videoQuality_ = other.videoQuality_;
      cameraZoom_ = other.cameraZoom_;
      lastTStampOfEveryDayLogin_ = other.lastTStampOfEveryDayLogin_;
      everyDayLoginIdList_ = other.everyDayLoginIdList_;
      oneTimeInSlot_ = other.oneTimeInSlot_;
      showBattleHead_ = other.showBattleHead_;
      showBattleTOT_ = other.showBattleTOT_;
      autoBattleTarget_ = other.autoBattleTarget_;
      showBattlePalHp_ = other.showBattlePalHp_;
      battleSkillLayout_ = other.battleSkillLayout_;
      keepBasicAttack_ = other.keepBasicAttack_;
      battleRockerFix_ = other.battleRockerFix_;
      battleTalkContent_ = other.battleTalkContent_.Clone();
      showBattleChat_ = other.showBattleChat_;
      showBattlePalName_ = other.showBattlePalName_;
      showBattleFrog_ = other.showBattleFrog_;
      showBattleOutline_ = other.showBattleOutline_;
      manualChanged_ = other.manualChanged_;
      showBattleFoeHp_ = other.showBattleFoeHp_;
      showBattleFoeName_ = other.showBattleFoeName_;
      hideDailyTaskEntry_ = other.hideDailyTaskEntry_;
      hideBagRareEntry_ = other.hideBagRareEntry_;
      showDBM_ = other.showDBM_;
      lastChallengeTipShowTime_ = other.lastChallengeTipShowTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting Clone() {
      return new Setting(this);
    }

    /// <summary>Field number for the "isAutoBattle" field.</summary>
    public const int IsAutoBattleFieldNumber = 1;
    private bool isAutoBattle_;
    /// <summary>
    ///自动战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoBattle {
      get { return isAutoBattle_; }
      set {
        isAutoBattle_ = value;
      }
    }

    /// <summary>Field number for the "showPlayerLevel" field.</summary>
    public const int ShowPlayerLevelFieldNumber = 2;
    private string showPlayerLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowPlayerLevel {
      get { return showPlayerLevel_; }
      set {
        showPlayerLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showPlayerUphead" field.</summary>
    public const int ShowPlayerUpheadFieldNumber = 3;
    private bool showPlayerUphead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowPlayerUphead {
      get { return showPlayerUphead_; }
      set {
        showPlayerUphead_ = value;
      }
    }

    /// <summary>Field number for the "showRealHead" field.</summary>
    public const int ShowRealHeadFieldNumber = 4;
    private bool showRealHead_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowRealHead {
      get { return showRealHead_; }
      set {
        showRealHead_ = value;
      }
    }

    /// <summary>Field number for the "showAllDamage" field.</summary>
    public const int ShowAllDamageFieldNumber = 5;
    private bool showAllDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAllDamage {
      get { return showAllDamage_; }
      set {
        showAllDamage_ = value;
      }
    }

    /// <summary>Field number for the "showRealBattleBg" field.</summary>
    public const int ShowRealBattleBgFieldNumber = 6;
    private bool showRealBattleBg_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowRealBattleBg {
      get { return showRealBattleBg_; }
      set {
        showRealBattleBg_ = value;
      }
    }

    /// <summary>Field number for the "autoAudio2Text" field.</summary>
    public const int AutoAudio2TextFieldNumber = 7;
    private int autoAudio2Text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoAudio2Text {
      get { return autoAudio2Text_; }
      set {
        autoAudio2Text_ = value;
      }
    }

    /// <summary>Field number for the "autoPlayAudioWorld" field.</summary>
    public const int AutoPlayAudioWorldFieldNumber = 8;
    private int autoPlayAudioWorld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoPlayAudioWorld {
      get { return autoPlayAudioWorld_; }
      set {
        autoPlayAudioWorld_ = value;
      }
    }

    /// <summary>Field number for the "autoPlayAudioTeam" field.</summary>
    public const int AutoPlayAudioTeamFieldNumber = 9;
    private int autoPlayAudioTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoPlayAudioTeam {
      get { return autoPlayAudioTeam_; }
      set {
        autoPlayAudioTeam_ = value;
      }
    }

    /// <summary>Field number for the "autoPlayAudioGuild" field.</summary>
    public const int AutoPlayAudioGuildFieldNumber = 10;
    private int autoPlayAudioGuild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoPlayAudioGuild {
      get { return autoPlayAudioGuild_; }
      set {
        autoPlayAudioGuild_ = value;
      }
    }

    /// <summary>Field number for the "autoPlayWeather" field.</summary>
    public const int AutoPlayWeatherFieldNumber = 11;
    private bool autoPlayWeather_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoPlayWeather {
      get { return autoPlayWeather_; }
      set {
        autoPlayWeather_ = value;
      }
    }

    /// <summary>Field number for the "showWorldBubble" field.</summary>
    public const int ShowWorldBubbleFieldNumber = 12;
    private int showWorldBubble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowWorldBubble {
      get { return showWorldBubble_; }
      set {
        showWorldBubble_ = value;
      }
    }

    /// <summary>Field number for the "showTeamBubble" field.</summary>
    public const int ShowTeamBubbleFieldNumber = 13;
    private int showTeamBubble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowTeamBubble {
      get { return showTeamBubble_; }
      set {
        showTeamBubble_ = value;
      }
    }

    /// <summary>Field number for the "showGuildBubble" field.</summary>
    public const int ShowGuildBubbleFieldNumber = 14;
    private int showGuildBubble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowGuildBubble {
      get { return showGuildBubble_; }
      set {
        showGuildBubble_ = value;
      }
    }

    /// <summary>Field number for the "showTeamreqBubble" field.</summary>
    public const int ShowTeamreqBubbleFieldNumber = 15;
    private int showTeamreqBubble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowTeamreqBubble {
      get { return showTeamreqBubble_; }
      set {
        showTeamreqBubble_ = value;
      }
    }

    /// <summary>Field number for the "videoQuality" field.</summary>
    public const int VideoQualityFieldNumber = 16;
    private int videoQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoQuality {
      get { return videoQuality_; }
      set {
        videoQuality_ = value;
      }
    }

    /// <summary>Field number for the "cameraZoom" field.</summary>
    public const int CameraZoomFieldNumber = 17;
    private bool cameraZoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CameraZoom {
      get { return cameraZoom_; }
      set {
        cameraZoom_ = value;
      }
    }

    /// <summary>Field number for the "lastTStampOfEveryDayLogin" field.</summary>
    public const int LastTStampOfEveryDayLoginFieldNumber = 18;
    private long lastTStampOfEveryDayLogin_;
    /// <summary>
    ///上一次修改该字段的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTStampOfEveryDayLogin {
      get { return lastTStampOfEveryDayLogin_; }
      set {
        lastTStampOfEveryDayLogin_ = value;
      }
    }

    /// <summary>Field number for the "everyDayLoginIdList" field.</summary>
    public const int EveryDayLoginIdListFieldNumber = 19;
    private string everyDayLoginIdList_ = "";
    /// <summary>
    ///每天第一次登录弹出的公告ID列表 "1;2;3;4..."
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EveryDayLoginIdList {
      get { return everyDayLoginIdList_; }
      set {
        everyDayLoginIdList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oneTimeInSlot" field.</summary>
    public const int OneTimeInSlotFieldNumber = 20;
    private string oneTimeInSlot_ = "";
    /// <summary>
    ///一个时间段内弹一次的公告ID,结束时间戳列表 "1,xxxxxx;2,xxxxxx;... "
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OneTimeInSlot {
      get { return oneTimeInSlot_; }
      set {
        oneTimeInSlot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showBattleHead" field.</summary>
    public const int ShowBattleHeadFieldNumber = 21;
    private bool showBattleHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleHead {
      get { return showBattleHead_; }
      set {
        showBattleHead_ = value;
      }
    }

    /// <summary>Field number for the "showBattleTOT" field.</summary>
    public const int ShowBattleTOTFieldNumber = 22;
    private bool showBattleTOT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleTOT {
      get { return showBattleTOT_; }
      set {
        showBattleTOT_ = value;
      }
    }

    /// <summary>Field number for the "autoBattleTarget" field.</summary>
    public const int AutoBattleTargetFieldNumber = 23;
    private bool autoBattleTarget_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoBattleTarget {
      get { return autoBattleTarget_; }
      set {
        autoBattleTarget_ = value;
      }
    }

    /// <summary>Field number for the "showBattlePalHp" field.</summary>
    public const int ShowBattlePalHpFieldNumber = 24;
    private bool showBattlePalHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattlePalHp {
      get { return showBattlePalHp_; }
      set {
        showBattlePalHp_ = value;
      }
    }

    /// <summary>Field number for the "battleSkillLayout" field.</summary>
    public const int BattleSkillLayoutFieldNumber = 25;
    private int battleSkillLayout_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleSkillLayout {
      get { return battleSkillLayout_; }
      set {
        battleSkillLayout_ = value;
      }
    }

    /// <summary>Field number for the "keepBasicAttack" field.</summary>
    public const int KeepBasicAttackFieldNumber = 26;
    private bool keepBasicAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepBasicAttack {
      get { return keepBasicAttack_; }
      set {
        keepBasicAttack_ = value;
      }
    }

    /// <summary>Field number for the "battleRockerFix" field.</summary>
    public const int BattleRockerFixFieldNumber = 27;
    private int battleRockerFix_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleRockerFix {
      get { return battleRockerFix_; }
      set {
        battleRockerFix_ = value;
      }
    }

    /// <summary>Field number for the "battleTalkContent" field.</summary>
    public const int BattleTalkContentFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _repeated_battleTalkContent_codec
        = pb::FieldCodec.ForString(226);
    private readonly pbc::RepeatedField<string> battleTalkContent_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BattleTalkContent {
      get { return battleTalkContent_; }
    }

    /// <summary>Field number for the "showBattleChat" field.</summary>
    public const int ShowBattleChatFieldNumber = 29;
    private bool showBattleChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleChat {
      get { return showBattleChat_; }
      set {
        showBattleChat_ = value;
      }
    }

    /// <summary>Field number for the "showBattlePalName" field.</summary>
    public const int ShowBattlePalNameFieldNumber = 30;
    private bool showBattlePalName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattlePalName {
      get { return showBattlePalName_; }
      set {
        showBattlePalName_ = value;
      }
    }

    /// <summary>Field number for the "showBattleFrog" field.</summary>
    public const int ShowBattleFrogFieldNumber = 31;
    private bool showBattleFrog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleFrog {
      get { return showBattleFrog_; }
      set {
        showBattleFrog_ = value;
      }
    }

    /// <summary>Field number for the "showBattleOutline" field.</summary>
    public const int ShowBattleOutlineFieldNumber = 32;
    private bool showBattleOutline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleOutline {
      get { return showBattleOutline_; }
      set {
        showBattleOutline_ = value;
      }
    }

    /// <summary>Field number for the "manualChanged" field.</summary>
    public const int ManualChangedFieldNumber = 33;
    private bool manualChanged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualChanged {
      get { return manualChanged_; }
      set {
        manualChanged_ = value;
      }
    }

    /// <summary>Field number for the "showBattleFoeHp" field.</summary>
    public const int ShowBattleFoeHpFieldNumber = 34;
    private bool showBattleFoeHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleFoeHp {
      get { return showBattleFoeHp_; }
      set {
        showBattleFoeHp_ = value;
      }
    }

    /// <summary>Field number for the "showBattleFoeName" field.</summary>
    public const int ShowBattleFoeNameFieldNumber = 35;
    private bool showBattleFoeName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleFoeName {
      get { return showBattleFoeName_; }
      set {
        showBattleFoeName_ = value;
      }
    }

    /// <summary>Field number for the "hideDailyTaskEntry" field.</summary>
    public const int HideDailyTaskEntryFieldNumber = 36;
    private bool hideDailyTaskEntry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HideDailyTaskEntry {
      get { return hideDailyTaskEntry_; }
      set {
        hideDailyTaskEntry_ = value;
      }
    }

    /// <summary>Field number for the "hideBagRareEntry" field.</summary>
    public const int HideBagRareEntryFieldNumber = 37;
    private bool hideBagRareEntry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HideBagRareEntry {
      get { return hideBagRareEntry_; }
      set {
        hideBagRareEntry_ = value;
      }
    }

    /// <summary>Field number for the "showDBM" field.</summary>
    public const int ShowDBMFieldNumber = 38;
    private bool showDBM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowDBM {
      get { return showDBM_; }
      set {
        showDBM_ = value;
      }
    }

    /// <summary>Field number for the "lastChallengeTipShowTime" field.</summary>
    public const int LastChallengeTipShowTimeFieldNumber = 39;
    private int lastChallengeTipShowTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastChallengeTipShowTime {
      get { return lastChallengeTipShowTime_; }
      set {
        lastChallengeTipShowTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Setting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Setting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsAutoBattle != other.IsAutoBattle) return false;
      if (ShowPlayerLevel != other.ShowPlayerLevel) return false;
      if (ShowPlayerUphead != other.ShowPlayerUphead) return false;
      if (ShowRealHead != other.ShowRealHead) return false;
      if (ShowAllDamage != other.ShowAllDamage) return false;
      if (ShowRealBattleBg != other.ShowRealBattleBg) return false;
      if (AutoAudio2Text != other.AutoAudio2Text) return false;
      if (AutoPlayAudioWorld != other.AutoPlayAudioWorld) return false;
      if (AutoPlayAudioTeam != other.AutoPlayAudioTeam) return false;
      if (AutoPlayAudioGuild != other.AutoPlayAudioGuild) return false;
      if (AutoPlayWeather != other.AutoPlayWeather) return false;
      if (ShowWorldBubble != other.ShowWorldBubble) return false;
      if (ShowTeamBubble != other.ShowTeamBubble) return false;
      if (ShowGuildBubble != other.ShowGuildBubble) return false;
      if (ShowTeamreqBubble != other.ShowTeamreqBubble) return false;
      if (VideoQuality != other.VideoQuality) return false;
      if (CameraZoom != other.CameraZoom) return false;
      if (LastTStampOfEveryDayLogin != other.LastTStampOfEveryDayLogin) return false;
      if (EveryDayLoginIdList != other.EveryDayLoginIdList) return false;
      if (OneTimeInSlot != other.OneTimeInSlot) return false;
      if (ShowBattleHead != other.ShowBattleHead) return false;
      if (ShowBattleTOT != other.ShowBattleTOT) return false;
      if (AutoBattleTarget != other.AutoBattleTarget) return false;
      if (ShowBattlePalHp != other.ShowBattlePalHp) return false;
      if (BattleSkillLayout != other.BattleSkillLayout) return false;
      if (KeepBasicAttack != other.KeepBasicAttack) return false;
      if (BattleRockerFix != other.BattleRockerFix) return false;
      if(!battleTalkContent_.Equals(other.battleTalkContent_)) return false;
      if (ShowBattleChat != other.ShowBattleChat) return false;
      if (ShowBattlePalName != other.ShowBattlePalName) return false;
      if (ShowBattleFrog != other.ShowBattleFrog) return false;
      if (ShowBattleOutline != other.ShowBattleOutline) return false;
      if (ManualChanged != other.ManualChanged) return false;
      if (ShowBattleFoeHp != other.ShowBattleFoeHp) return false;
      if (ShowBattleFoeName != other.ShowBattleFoeName) return false;
      if (HideDailyTaskEntry != other.HideDailyTaskEntry) return false;
      if (HideBagRareEntry != other.HideBagRareEntry) return false;
      if (ShowDBM != other.ShowDBM) return false;
      if (LastChallengeTipShowTime != other.LastChallengeTipShowTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsAutoBattle != false) hash ^= IsAutoBattle.GetHashCode();
      if (ShowPlayerLevel.Length != 0) hash ^= ShowPlayerLevel.GetHashCode();
      if (ShowPlayerUphead != false) hash ^= ShowPlayerUphead.GetHashCode();
      if (ShowRealHead != false) hash ^= ShowRealHead.GetHashCode();
      if (ShowAllDamage != false) hash ^= ShowAllDamage.GetHashCode();
      if (ShowRealBattleBg != false) hash ^= ShowRealBattleBg.GetHashCode();
      if (AutoAudio2Text != 0) hash ^= AutoAudio2Text.GetHashCode();
      if (AutoPlayAudioWorld != 0) hash ^= AutoPlayAudioWorld.GetHashCode();
      if (AutoPlayAudioTeam != 0) hash ^= AutoPlayAudioTeam.GetHashCode();
      if (AutoPlayAudioGuild != 0) hash ^= AutoPlayAudioGuild.GetHashCode();
      if (AutoPlayWeather != false) hash ^= AutoPlayWeather.GetHashCode();
      if (ShowWorldBubble != 0) hash ^= ShowWorldBubble.GetHashCode();
      if (ShowTeamBubble != 0) hash ^= ShowTeamBubble.GetHashCode();
      if (ShowGuildBubble != 0) hash ^= ShowGuildBubble.GetHashCode();
      if (ShowTeamreqBubble != 0) hash ^= ShowTeamreqBubble.GetHashCode();
      if (VideoQuality != 0) hash ^= VideoQuality.GetHashCode();
      if (CameraZoom != false) hash ^= CameraZoom.GetHashCode();
      if (LastTStampOfEveryDayLogin != 0L) hash ^= LastTStampOfEveryDayLogin.GetHashCode();
      if (EveryDayLoginIdList.Length != 0) hash ^= EveryDayLoginIdList.GetHashCode();
      if (OneTimeInSlot.Length != 0) hash ^= OneTimeInSlot.GetHashCode();
      if (ShowBattleHead != false) hash ^= ShowBattleHead.GetHashCode();
      if (ShowBattleTOT != false) hash ^= ShowBattleTOT.GetHashCode();
      if (AutoBattleTarget != false) hash ^= AutoBattleTarget.GetHashCode();
      if (ShowBattlePalHp != false) hash ^= ShowBattlePalHp.GetHashCode();
      if (BattleSkillLayout != 0) hash ^= BattleSkillLayout.GetHashCode();
      if (KeepBasicAttack != false) hash ^= KeepBasicAttack.GetHashCode();
      if (BattleRockerFix != 0) hash ^= BattleRockerFix.GetHashCode();
      hash ^= battleTalkContent_.GetHashCode();
      if (ShowBattleChat != false) hash ^= ShowBattleChat.GetHashCode();
      if (ShowBattlePalName != false) hash ^= ShowBattlePalName.GetHashCode();
      if (ShowBattleFrog != false) hash ^= ShowBattleFrog.GetHashCode();
      if (ShowBattleOutline != false) hash ^= ShowBattleOutline.GetHashCode();
      if (ManualChanged != false) hash ^= ManualChanged.GetHashCode();
      if (ShowBattleFoeHp != false) hash ^= ShowBattleFoeHp.GetHashCode();
      if (ShowBattleFoeName != false) hash ^= ShowBattleFoeName.GetHashCode();
      if (HideDailyTaskEntry != false) hash ^= HideDailyTaskEntry.GetHashCode();
      if (HideBagRareEntry != false) hash ^= HideBagRareEntry.GetHashCode();
      if (ShowDBM != false) hash ^= ShowDBM.GetHashCode();
      if (LastChallengeTipShowTime != 0) hash ^= LastChallengeTipShowTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAutoBattle != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAutoBattle);
      }
      if (ShowPlayerLevel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShowPlayerLevel);
      }
      if (ShowPlayerUphead != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowPlayerUphead);
      }
      if (ShowRealHead != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShowRealHead);
      }
      if (ShowAllDamage != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShowAllDamage);
      }
      if (ShowRealBattleBg != false) {
        output.WriteRawTag(48);
        output.WriteBool(ShowRealBattleBg);
      }
      if (AutoAudio2Text != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AutoAudio2Text);
      }
      if (AutoPlayAudioWorld != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AutoPlayAudioWorld);
      }
      if (AutoPlayAudioTeam != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AutoPlayAudioTeam);
      }
      if (AutoPlayAudioGuild != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AutoPlayAudioGuild);
      }
      if (AutoPlayWeather != false) {
        output.WriteRawTag(88);
        output.WriteBool(AutoPlayWeather);
      }
      if (ShowWorldBubble != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShowWorldBubble);
      }
      if (ShowTeamBubble != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ShowTeamBubble);
      }
      if (ShowGuildBubble != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ShowGuildBubble);
      }
      if (ShowTeamreqBubble != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ShowTeamreqBubble);
      }
      if (VideoQuality != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VideoQuality);
      }
      if (CameraZoom != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CameraZoom);
      }
      if (LastTStampOfEveryDayLogin != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(LastTStampOfEveryDayLogin);
      }
      if (EveryDayLoginIdList.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(EveryDayLoginIdList);
      }
      if (OneTimeInSlot.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(OneTimeInSlot);
      }
      if (ShowBattleHead != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(ShowBattleHead);
      }
      if (ShowBattleTOT != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ShowBattleTOT);
      }
      if (AutoBattleTarget != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(AutoBattleTarget);
      }
      if (ShowBattlePalHp != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ShowBattlePalHp);
      }
      if (BattleSkillLayout != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(BattleSkillLayout);
      }
      if (KeepBasicAttack != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(KeepBasicAttack);
      }
      if (BattleRockerFix != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(BattleRockerFix);
      }
      battleTalkContent_.WriteTo(output, _repeated_battleTalkContent_codec);
      if (ShowBattleChat != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(ShowBattleChat);
      }
      if (ShowBattlePalName != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ShowBattlePalName);
      }
      if (ShowBattleFrog != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(ShowBattleFrog);
      }
      if (ShowBattleOutline != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ShowBattleOutline);
      }
      if (ManualChanged != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(ManualChanged);
      }
      if (ShowBattleFoeHp != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(ShowBattleFoeHp);
      }
      if (ShowBattleFoeName != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(ShowBattleFoeName);
      }
      if (HideDailyTaskEntry != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HideDailyTaskEntry);
      }
      if (HideBagRareEntry != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(HideBagRareEntry);
      }
      if (ShowDBM != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(ShowDBM);
      }
      if (LastChallengeTipShowTime != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(LastChallengeTipShowTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAutoBattle != false) {
        size += 1 + 1;
      }
      if (ShowPlayerLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowPlayerLevel);
      }
      if (ShowPlayerUphead != false) {
        size += 1 + 1;
      }
      if (ShowRealHead != false) {
        size += 1 + 1;
      }
      if (ShowAllDamage != false) {
        size += 1 + 1;
      }
      if (ShowRealBattleBg != false) {
        size += 1 + 1;
      }
      if (AutoAudio2Text != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoAudio2Text);
      }
      if (AutoPlayAudioWorld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoPlayAudioWorld);
      }
      if (AutoPlayAudioTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoPlayAudioTeam);
      }
      if (AutoPlayAudioGuild != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoPlayAudioGuild);
      }
      if (AutoPlayWeather != false) {
        size += 1 + 1;
      }
      if (ShowWorldBubble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowWorldBubble);
      }
      if (ShowTeamBubble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowTeamBubble);
      }
      if (ShowGuildBubble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowGuildBubble);
      }
      if (ShowTeamreqBubble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowTeamreqBubble);
      }
      if (VideoQuality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VideoQuality);
      }
      if (CameraZoom != false) {
        size += 2 + 1;
      }
      if (LastTStampOfEveryDayLogin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTStampOfEveryDayLogin);
      }
      if (EveryDayLoginIdList.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EveryDayLoginIdList);
      }
      if (OneTimeInSlot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OneTimeInSlot);
      }
      if (ShowBattleHead != false) {
        size += 2 + 1;
      }
      if (ShowBattleTOT != false) {
        size += 2 + 1;
      }
      if (AutoBattleTarget != false) {
        size += 2 + 1;
      }
      if (ShowBattlePalHp != false) {
        size += 2 + 1;
      }
      if (BattleSkillLayout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleSkillLayout);
      }
      if (KeepBasicAttack != false) {
        size += 2 + 1;
      }
      if (BattleRockerFix != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleRockerFix);
      }
      size += battleTalkContent_.CalculateSize(_repeated_battleTalkContent_codec);
      if (ShowBattleChat != false) {
        size += 2 + 1;
      }
      if (ShowBattlePalName != false) {
        size += 2 + 1;
      }
      if (ShowBattleFrog != false) {
        size += 2 + 1;
      }
      if (ShowBattleOutline != false) {
        size += 2 + 1;
      }
      if (ManualChanged != false) {
        size += 2 + 1;
      }
      if (ShowBattleFoeHp != false) {
        size += 2 + 1;
      }
      if (ShowBattleFoeName != false) {
        size += 2 + 1;
      }
      if (HideDailyTaskEntry != false) {
        size += 2 + 1;
      }
      if (HideBagRareEntry != false) {
        size += 2 + 1;
      }
      if (ShowDBM != false) {
        size += 2 + 1;
      }
      if (LastChallengeTipShowTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastChallengeTipShowTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Setting other) {
      if (other == null) {
        return;
      }
      if (other.IsAutoBattle != false) {
        IsAutoBattle = other.IsAutoBattle;
      }
      if (other.ShowPlayerLevel.Length != 0) {
        ShowPlayerLevel = other.ShowPlayerLevel;
      }
      if (other.ShowPlayerUphead != false) {
        ShowPlayerUphead = other.ShowPlayerUphead;
      }
      if (other.ShowRealHead != false) {
        ShowRealHead = other.ShowRealHead;
      }
      if (other.ShowAllDamage != false) {
        ShowAllDamage = other.ShowAllDamage;
      }
      if (other.ShowRealBattleBg != false) {
        ShowRealBattleBg = other.ShowRealBattleBg;
      }
      if (other.AutoAudio2Text != 0) {
        AutoAudio2Text = other.AutoAudio2Text;
      }
      if (other.AutoPlayAudioWorld != 0) {
        AutoPlayAudioWorld = other.AutoPlayAudioWorld;
      }
      if (other.AutoPlayAudioTeam != 0) {
        AutoPlayAudioTeam = other.AutoPlayAudioTeam;
      }
      if (other.AutoPlayAudioGuild != 0) {
        AutoPlayAudioGuild = other.AutoPlayAudioGuild;
      }
      if (other.AutoPlayWeather != false) {
        AutoPlayWeather = other.AutoPlayWeather;
      }
      if (other.ShowWorldBubble != 0) {
        ShowWorldBubble = other.ShowWorldBubble;
      }
      if (other.ShowTeamBubble != 0) {
        ShowTeamBubble = other.ShowTeamBubble;
      }
      if (other.ShowGuildBubble != 0) {
        ShowGuildBubble = other.ShowGuildBubble;
      }
      if (other.ShowTeamreqBubble != 0) {
        ShowTeamreqBubble = other.ShowTeamreqBubble;
      }
      if (other.VideoQuality != 0) {
        VideoQuality = other.VideoQuality;
      }
      if (other.CameraZoom != false) {
        CameraZoom = other.CameraZoom;
      }
      if (other.LastTStampOfEveryDayLogin != 0L) {
        LastTStampOfEveryDayLogin = other.LastTStampOfEveryDayLogin;
      }
      if (other.EveryDayLoginIdList.Length != 0) {
        EveryDayLoginIdList = other.EveryDayLoginIdList;
      }
      if (other.OneTimeInSlot.Length != 0) {
        OneTimeInSlot = other.OneTimeInSlot;
      }
      if (other.ShowBattleHead != false) {
        ShowBattleHead = other.ShowBattleHead;
      }
      if (other.ShowBattleTOT != false) {
        ShowBattleTOT = other.ShowBattleTOT;
      }
      if (other.AutoBattleTarget != false) {
        AutoBattleTarget = other.AutoBattleTarget;
      }
      if (other.ShowBattlePalHp != false) {
        ShowBattlePalHp = other.ShowBattlePalHp;
      }
      if (other.BattleSkillLayout != 0) {
        BattleSkillLayout = other.BattleSkillLayout;
      }
      if (other.KeepBasicAttack != false) {
        KeepBasicAttack = other.KeepBasicAttack;
      }
      if (other.BattleRockerFix != 0) {
        BattleRockerFix = other.BattleRockerFix;
      }
      battleTalkContent_.Add(other.battleTalkContent_);
      if (other.ShowBattleChat != false) {
        ShowBattleChat = other.ShowBattleChat;
      }
      if (other.ShowBattlePalName != false) {
        ShowBattlePalName = other.ShowBattlePalName;
      }
      if (other.ShowBattleFrog != false) {
        ShowBattleFrog = other.ShowBattleFrog;
      }
      if (other.ShowBattleOutline != false) {
        ShowBattleOutline = other.ShowBattleOutline;
      }
      if (other.ManualChanged != false) {
        ManualChanged = other.ManualChanged;
      }
      if (other.ShowBattleFoeHp != false) {
        ShowBattleFoeHp = other.ShowBattleFoeHp;
      }
      if (other.ShowBattleFoeName != false) {
        ShowBattleFoeName = other.ShowBattleFoeName;
      }
      if (other.HideDailyTaskEntry != false) {
        HideDailyTaskEntry = other.HideDailyTaskEntry;
      }
      if (other.HideBagRareEntry != false) {
        HideBagRareEntry = other.HideBagRareEntry;
      }
      if (other.ShowDBM != false) {
        ShowDBM = other.ShowDBM;
      }
      if (other.LastChallengeTipShowTime != 0) {
        LastChallengeTipShowTime = other.LastChallengeTipShowTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAutoBattle = input.ReadBool();
            break;
          }
          case 18: {
            ShowPlayerLevel = input.ReadString();
            break;
          }
          case 24: {
            ShowPlayerUphead = input.ReadBool();
            break;
          }
          case 32: {
            ShowRealHead = input.ReadBool();
            break;
          }
          case 40: {
            ShowAllDamage = input.ReadBool();
            break;
          }
          case 48: {
            ShowRealBattleBg = input.ReadBool();
            break;
          }
          case 56: {
            AutoAudio2Text = input.ReadInt32();
            break;
          }
          case 64: {
            AutoPlayAudioWorld = input.ReadInt32();
            break;
          }
          case 72: {
            AutoPlayAudioTeam = input.ReadInt32();
            break;
          }
          case 80: {
            AutoPlayAudioGuild = input.ReadInt32();
            break;
          }
          case 88: {
            AutoPlayWeather = input.ReadBool();
            break;
          }
          case 96: {
            ShowWorldBubble = input.ReadInt32();
            break;
          }
          case 104: {
            ShowTeamBubble = input.ReadInt32();
            break;
          }
          case 112: {
            ShowGuildBubble = input.ReadInt32();
            break;
          }
          case 120: {
            ShowTeamreqBubble = input.ReadInt32();
            break;
          }
          case 128: {
            VideoQuality = input.ReadInt32();
            break;
          }
          case 136: {
            CameraZoom = input.ReadBool();
            break;
          }
          case 144: {
            LastTStampOfEveryDayLogin = input.ReadInt64();
            break;
          }
          case 154: {
            EveryDayLoginIdList = input.ReadString();
            break;
          }
          case 162: {
            OneTimeInSlot = input.ReadString();
            break;
          }
          case 168: {
            ShowBattleHead = input.ReadBool();
            break;
          }
          case 176: {
            ShowBattleTOT = input.ReadBool();
            break;
          }
          case 184: {
            AutoBattleTarget = input.ReadBool();
            break;
          }
          case 192: {
            ShowBattlePalHp = input.ReadBool();
            break;
          }
          case 200: {
            BattleSkillLayout = input.ReadInt32();
            break;
          }
          case 208: {
            KeepBasicAttack = input.ReadBool();
            break;
          }
          case 216: {
            BattleRockerFix = input.ReadInt32();
            break;
          }
          case 226: {
            battleTalkContent_.AddEntriesFrom(input, _repeated_battleTalkContent_codec);
            break;
          }
          case 232: {
            ShowBattleChat = input.ReadBool();
            break;
          }
          case 240: {
            ShowBattlePalName = input.ReadBool();
            break;
          }
          case 248: {
            ShowBattleFrog = input.ReadBool();
            break;
          }
          case 256: {
            ShowBattleOutline = input.ReadBool();
            break;
          }
          case 264: {
            ManualChanged = input.ReadBool();
            break;
          }
          case 272: {
            ShowBattleFoeHp = input.ReadBool();
            break;
          }
          case 280: {
            ShowBattleFoeName = input.ReadBool();
            break;
          }
          case 288: {
            HideDailyTaskEntry = input.ReadBool();
            break;
          }
          case 296: {
            HideBagRareEntry = input.ReadBool();
            break;
          }
          case 304: {
            ShowDBM = input.ReadBool();
            break;
          }
          case 312: {
            LastChallengeTipShowTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 只用于本地存储
  /// </summary>
  public sealed partial class LocalUserData : pb::IMessage<LocalUserData> {
    private static readonly pb::MessageParser<LocalUserData> _parser = new pb::MessageParser<LocalUserData>(() => new LocalUserData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalUserData(LocalUserData other) : this() {
      Setting = other.setting_ != null ? other.Setting.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalUserData Clone() {
      return new LocalUserData(this);
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 1;
    private global::Shared.Setting setting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared.Setting Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_items_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> items_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Setting, other.Setting)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (setting_ != null) hash ^= Setting.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (setting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Setting);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (setting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Setting);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalUserData other) {
      if (other == null) {
        return;
      }
      if (other.setting_ != null) {
        if (setting_ == null) {
          setting_ = new global::Shared.Setting();
        }
        Setting.MergeFrom(other.Setting);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (setting_ == null) {
              setting_ = new global::Shared.Setting();
            }
            input.ReadMessage(setting_);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Pong : pb::IMessage<Pong> {
    private static readonly pb::MessageParser<Pong> _parser = new pb::MessageParser<Pong>(() => new Pong());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong(Pong other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong Clone() {
      return new Pong(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pong other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ServerMessage : pb::IMessage<ServerMessage> {
    private static readonly pb::MessageParser<ServerMessage> _parser = new pb::MessageParser<ServerMessage>(() => new ServerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage(ServerMessage other) : this() {
      content_ = other.content_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage Clone() {
      return new ServerMessage(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 11;
    private string code_ = "";
    /// <summary>
    /// details to be defined later
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 90: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVStores : pb::IMessage<KVStores> {
    private static readonly pb::MessageParser<KVStores> _parser = new pb::MessageParser<KVStores>(() => new KVStores());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVStores> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Shared.SharedReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVStores() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVStores(KVStores other) : this() {
      Tutorial = other.tutorial_ != null ? other.Tutorial.Clone() : null;
      Generic = other.generic_ != null ? other.Generic.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVStores Clone() {
      return new KVStores(this);
    }

    /// <summary>Field number for the "tutorial" field.</summary>
    public const int TutorialFieldNumber = 1;
    private global::Kvstore.KVStore tutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvstore.KVStore Tutorial {
      get { return tutorial_; }
      set {
        tutorial_ = value;
      }
    }

    /// <summary>Field number for the "generic" field.</summary>
    public const int GenericFieldNumber = 2;
    private global::Kvstore.KVStore generic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kvstore.KVStore Generic {
      get { return generic_; }
      set {
        generic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVStores);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVStores other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tutorial, other.Tutorial)) return false;
      if (!object.Equals(Generic, other.Generic)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tutorial_ != null) hash ^= Tutorial.GetHashCode();
      if (generic_ != null) hash ^= Generic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tutorial_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tutorial);
      }
      if (generic_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Generic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tutorial_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tutorial);
      }
      if (generic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generic);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVStores other) {
      if (other == null) {
        return;
      }
      if (other.tutorial_ != null) {
        if (tutorial_ == null) {
          tutorial_ = new global::Kvstore.KVStore();
        }
        Tutorial.MergeFrom(other.Tutorial);
      }
      if (other.generic_ != null) {
        if (generic_ == null) {
          generic_ = new global::Kvstore.KVStore();
        }
        Generic.MergeFrom(other.Generic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tutorial_ == null) {
              tutorial_ = new global::Kvstore.KVStore();
            }
            input.ReadMessage(tutorial_);
            break;
          }
          case 18: {
            if (generic_ == null) {
              generic_ = new global::Kvstore.KVStore();
            }
            input.ReadMessage(generic_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
