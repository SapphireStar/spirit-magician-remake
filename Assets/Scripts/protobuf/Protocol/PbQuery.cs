// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_query.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbQuery {

  /// <summary>Holder for reflection information generated from pb_query.proto</summary>
  public static partial class PbQueryReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbQueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wYl9xdWVyeS5wcm90bxIIcGJfcXVlcnkaDHNoYXJlZC5wcm90byIoChND",
            "MlNfUXVlcnlTZXJ2ZXJUaW1lEhEKCXRpbWVzdGFtcBgBIAEoAyJOChNTMkNf",
            "UXVlcnlTZXJ2ZXJUaW1lEhEKCXRpbWVzdGFtcBgBIAEoAxIQCgh0aW1lem9u",
            "ZRgCIAEoCRISCgp0aW1lb2Zmc2V0GAMgASgFIhYKFEMyU19RdWVyeUJhdHRs",
            "ZVN0YXRlIjsKFFMyQ19RdWVyeUJhdHRsZVN0YXRlEhAKCGJhdHRsZUlkGAEg",
            "ASgJEhEKCWJhdHRsZVVybBgCIAEoCSIPCg1DMlNfUXVlcnlVc2VyIjMKDVMy",
            "Q19RdWVyeVVzZXISIgoIdXNlckRhdGEYASABKAsyEC5zaGFyZWQuVXNlckRh",
            "dGFCDVoLcGIvcGJfcXVlcnliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Shared.SharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.C2S_QueryServerTime), global::PbQuery.C2S_QueryServerTime.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.S2C_QueryServerTime), global::PbQuery.S2C_QueryServerTime.Parser, new[]{ "Timestamp", "Timezone", "Timeoffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.C2S_QueryBattleState), global::PbQuery.C2S_QueryBattleState.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.S2C_QueryBattleState), global::PbQuery.S2C_QueryBattleState.Parser, new[]{ "BattleId", "BattleUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.C2S_QueryUser), global::PbQuery.C2S_QueryUser.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbQuery.S2C_QueryUser), global::PbQuery.S2C_QueryUser.Parser, new[]{ "UserData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 查询服务器时间
  /// </summary>
  public sealed partial class C2S_QueryServerTime : pb::IMessage<C2S_QueryServerTime> {
    private static readonly pb::MessageParser<C2S_QueryServerTime> _parser = new pb::MessageParser<C2S_QueryServerTime>(() => new C2S_QueryServerTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QueryServerTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryServerTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryServerTime(C2S_QueryServerTime other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryServerTime Clone() {
      return new C2S_QueryServerTime(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    ///客户端当前时间戳 毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QueryServerTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QueryServerTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QueryServerTime other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_QueryServerTime : pb::IMessage<S2C_QueryServerTime> {
    private static readonly pb::MessageParser<S2C_QueryServerTime> _parser = new pb::MessageParser<S2C_QueryServerTime>(() => new S2C_QueryServerTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QueryServerTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryServerTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryServerTime(S2C_QueryServerTime other) : this() {
      timestamp_ = other.timestamp_;
      timezone_ = other.timezone_;
      timeoffset_ = other.timeoffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryServerTime Clone() {
      return new S2C_QueryServerTime(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    ///服务端时间戳 纳秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 2;
    private string timezone_ = "";
    /// <summary>
    ///时区 字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeoffset" field.</summary>
    public const int TimeoffsetFieldNumber = 3;
    private int timeoffset_;
    /// <summary>
    ///时间偏移 秒 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeoffset {
      get { return timeoffset_; }
      set {
        timeoffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QueryServerTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QueryServerTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Timezone != other.Timezone) return false;
      if (Timeoffset != other.Timeoffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Timeoffset != 0) hash ^= Timeoffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timezone);
      }
      if (Timeoffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timeoffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Timeoffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeoffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QueryServerTime other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Timeoffset != 0) {
        Timeoffset = other.Timeoffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            Timezone = input.ReadString();
            break;
          }
          case 24: {
            Timeoffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查询战斗状态
  /// </summary>
  public sealed partial class C2S_QueryBattleState : pb::IMessage<C2S_QueryBattleState> {
    private static readonly pb::MessageParser<C2S_QueryBattleState> _parser = new pb::MessageParser<C2S_QueryBattleState>(() => new C2S_QueryBattleState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QueryBattleState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryBattleState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryBattleState(C2S_QueryBattleState other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryBattleState Clone() {
      return new C2S_QueryBattleState(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QueryBattleState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QueryBattleState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QueryBattleState other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_QueryBattleState : pb::IMessage<S2C_QueryBattleState> {
    private static readonly pb::MessageParser<S2C_QueryBattleState> _parser = new pb::MessageParser<S2C_QueryBattleState>(() => new S2C_QueryBattleState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QueryBattleState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryBattleState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryBattleState(S2C_QueryBattleState other) : this() {
      battleId_ = other.battleId_;
      battleUrl_ = other.battleUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryBattleState Clone() {
      return new S2C_QueryBattleState(this);
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private string battleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleId {
      get { return battleId_; }
      set {
        battleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battleUrl" field.</summary>
    public const int BattleUrlFieldNumber = 2;
    private string battleUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleUrl {
      get { return battleUrl_; }
      set {
        battleUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QueryBattleState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QueryBattleState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (BattleUrl != other.BattleUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId.Length != 0) hash ^= BattleId.GetHashCode();
      if (BattleUrl.Length != 0) hash ^= BattleUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BattleId);
      }
      if (BattleUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BattleUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleId);
      }
      if (BattleUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QueryBattleState other) {
      if (other == null) {
        return;
      }
      if (other.BattleId.Length != 0) {
        BattleId = other.BattleId;
      }
      if (other.BattleUrl.Length != 0) {
        BattleUrl = other.BattleUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BattleId = input.ReadString();
            break;
          }
          case 18: {
            BattleUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自己的信息
  /// </summary>
  public sealed partial class C2S_QueryUser : pb::IMessage<C2S_QueryUser> {
    private static readonly pb::MessageParser<C2S_QueryUser> _parser = new pb::MessageParser<C2S_QueryUser>(() => new C2S_QueryUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QueryUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryUser(C2S_QueryUser other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QueryUser Clone() {
      return new C2S_QueryUser(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QueryUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QueryUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QueryUser other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_QueryUser : pb::IMessage<S2C_QueryUser> {
    private static readonly pb::MessageParser<S2C_QueryUser> _parser = new pb::MessageParser<S2C_QueryUser>(() => new S2C_QueryUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QueryUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbQuery.PbQueryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryUser(S2C_QueryUser other) : this() {
      UserData = other.userData_ != null ? other.UserData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QueryUser Clone() {
      return new S2C_QueryUser(this);
    }

    /// <summary>Field number for the "userData" field.</summary>
    public const int UserDataFieldNumber = 1;
    private global::Shared.UserData userData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared.UserData UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QueryUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QueryUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserData, other.UserData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userData_ != null) hash ^= UserData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QueryUser other) {
      if (other == null) {
        return;
      }
      if (other.userData_ != null) {
        if (userData_ == null) {
          userData_ = new global::Shared.UserData();
        }
        UserData.MergeFrom(other.UserData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userData_ == null) {
              userData_ = new global::Shared.UserData();
            }
            input.ReadMessage(userData_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
