// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_internal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbInternal {

  /// <summary>Holder for reflection information generated from pb_internal.proto</summary>
  public static partial class PbInternalReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_internal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbInternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYl9pbnRlcm5hbC5wcm90bxILcGJfaW50ZXJuYWwiawoNSW50ZXJuYWxF",
            "cnJvchIhCgdjb21tYW5kGAEgASgOMhAucGJfaW50ZXJuYWwuQ01EEiIKCWVy",
            "cm9yQ29kZRgCIAEoDjIPLnBiX2ludGVybmFsLkVDEhMKC2Vycm9yU3RyaW5n",
            "GAMgASgJIlkKGkludGVybmFsU2VydmljZVJlZ2lzdGVyUmVxEhMKC3NlcnZp",
            "Y2VUeXBlGAEgASgJEhMKC3NlcnZpY2VOYW1lGAIgASgJEhEKCWlzUHJpdmF0",
            "ZRgDIAEoCCJ/ChpJbnRlcm5hbFNlcnZpY2VSZWdpc3RlclJlcxIiCgllcnJv",
            "ckNvZGUYASABKA4yDy5wYl9pbnRlcm5hbC5FQxITCgtlcnJvclN0cmluZxgC",
            "IAEoCRITCgtzZXJ2aWNlVHlwZRgDIAEoCRITCgtzZXJ2aWNlTmFtZRgEIAEo",
            "CSJJCh1JbnRlcm5hbFNlcnZpY2VDbG9zZUJyb2FkY2FzdBITCgtzZXJ2aWNl",
            "VHlwZRgBIAEoCRITCgtzZXJ2aWNlTmFtZRgCIAEoCSJtChlJbnRlcm5hbFNl",
            "cnZpY2VQcm90ZWN0UmVxEhMKC3NlcnZpY2VUeXBlGAEgASgJEhMKC3NlcnZp",
            "Y2VOYW1lGAIgASgJEhEKCWlzUHJvdGVjdBgDIAEoCBITCgtwcm90ZWN0VGlt",
            "ZRgEIAEoBSKCAQobSW50ZXJuYWxQbGF5ZXJUb0dhbWVNZXNzYWdlEhUKDXB1",
            "YmxpY0NvbW1hbmQYASABKAUSFwoPcGxheWVyU2Vzc2lvbklkGAIgASgEEhMK",
            "C2dhdGV3YXlOYW1lGAMgASgJEhAKCGdhbWVOYW1lGAQgASgJEgwKBGRhdGEY",
            "BSABKAwiggEKG0ludGVybmFsR2FtZVRvUGxheWVyTWVzc2FnZRIVCg1wdWJs",
            "aWNDb21tYW5kGAEgASgFEhcKD3BsYXllclNlc3Npb25JZBgCIAEoBBITCgtn",
            "YXRld2F5TmFtZRgDIAEoCRIQCghnYW1lTmFtZRgEIAEoCRIMCgRkYXRhGAUg",
            "ASgMIowBCiRJbnRlcm5hbEdhbWVUb0dhdGVNdWx0aVBsYXllck1lc3NhZ2US",
            "FQoNcHVibGljQ29tbWFuZBgBIAEoBRITCgtnYXRld2F5TmFtZRgCIAEoCRIQ",
            "CghnYW1lTmFtZRgDIAEoCRIYChBwbGF5ZXJTZXNzaW9uSWRzGAQgAygEEgwK",
            "BGRhdGEYBSABKAwicAoiSW50ZXJuYWxHYW1lVG9HYXRlQnJvYWRjYXN0TWVz",
            "c2FnZRIVCg1wdWJsaWNDb21tYW5kGAEgASgFEhMKC2dhdGV3YXlOYW1lGAIg",
            "ASgJEhAKCGdhbWVOYW1lGAMgASgJEgwKBGRhdGEYBCABKAwiYAoYSW50ZXJu",
            "YWxQcm94eVNlcnZpY2VTeW5jEhEKCXByb3h5TmFtZRgBIAEoCRIxCgtzZXJ2",
            "aWNlTGlzdBgCIAMoCzIcLnBiX2ludGVybmFsLkludGVybmFsU2VydmljZSIt",
            "Cg9JbnRlcm5hbFNlcnZpY2USDAoEdHlwZRgBIAEoCRIMCgRuYW1lGAIgASgJ",
            "InIKHUludGVybmFsUHJveHlUb1NlcnZpY2VNZXNzYWdlEiEKB2NvbW1hbmQY",
            "ASABKA4yEC5wYl9pbnRlcm5hbC5DTUQSDgoGc2VuZGVyGAIgASgJEhAKCHJl",
            "Y2lldmVyGAMgASgJEgwKBGRhdGEYBCABKAwiWAolSW50ZXJuYWxQcm94eVRv",
            "RXh0ZXJuYWxTZXJ2aWNlTWVzc2FnZRIhCgdjb21tYW5kGAEgASgOMhAucGJf",
            "aW50ZXJuYWwuQ01EEgwKBGRhdGEYAiABKAwivwEKEkludGVybmFsUlBDTWVz",
            "c2FnZRIKCgJpZBgBIAEoBBILCgNlcnIYAiABKAkSEgoKY2FsbGVyVHlwZRgD",
            "IAEoCRISCgpjYWxsZXJOYW1lGAQgASgJEhQKDHJlY2VpdmVyVHlwZRgFIAEo",
            "CRIUCgxyZWNlaXZlck5hbWUYBiABKAkSEAoIZnVuY05hbWUYByABKAkSKgoE",
            "ZGF0YRgIIAEoCzIcLnBiX2ludGVybmFsLkludGVybmFsUlBDRGF0YSKgBAoP",
            "SW50ZXJuYWxSUENEYXRhEhMKC3VpbnQ2NFNsaWNlGAEgAygEEhIKCmludDY0",
            "U2xpY2UYAiADKAMSEwoLc3RyaW5nU2xpY2UYAyADKAkSPgoJdWludDY0TWFw",
            "GAQgAygLMisucGJfaW50ZXJuYWwuSW50ZXJuYWxSUENEYXRhLlVpbnQ2NE1h",
            "cEVudHJ5EjwKCGludDY0TWFwGAUgAygLMioucGJfaW50ZXJuYWwuSW50ZXJu",
            "YWxSUENEYXRhLkludDY0TWFwRW50cnkSPgoJc3RyaW5nTWFwGAYgAygLMisu",
            "cGJfaW50ZXJuYWwuSW50ZXJuYWxSUENEYXRhLlN0cmluZ01hcEVudHJ5Eg0K",
            "BWJ5dGVzGAcgASgMEjwKCGludDMyTWFwGAggAygLMioucGJfaW50ZXJuYWwu",
            "SW50ZXJuYWxSUENEYXRhLkludDMyTWFwRW50cnkaMAoOVWludDY0TWFwRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgEOgI4ARovCg1JbnQ2NE1h",
            "cEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEaMAoOU3Ry",
            "aW5nTWFwRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARov",
            "Cg1JbnQzMk1hcEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCToC",
            "OAEiigEKHEludGVybmFsU2VydmljZVRvR2FtZU1lc3NhZ2USDwoHY29tbWFu",
            "ZBgBIAEoBRITCgtzZXJ2aWNlTmFtZRgCIAEoCRIQCghzZXJ2ZXJJZBgDIAEo",
            "AxIRCglpc1RvQWdlbnQYBCABKAgSEQoJcGxheWVySWRzGAUgAygDEgwKBGRh",
            "dGEYBiABKAwioAEKHkludGVybmFsU2VydmljZVRvU2VydmljZU5vdGlmeRIS",
            "CgpzZW5kZXJUeXBlGAEgASgJEhIKCnNlbmRlck5hbWUYAiABKAkSFAoMcmVj",
            "ZWl2ZXJUeXBlGAMgASgJEhQKDHJlY2VpdmVyTmFtZRgEIAEoCRIqCgRkYXRh",
            "GAUgASgLMhwucGJfaW50ZXJuYWwuSW50ZXJuYWxSUENEYXRhIl0KG0ludGVy",
            "bmFsUGxheWVyTG9nb3V0TWVzc2FnZRIXCg9wbGF5ZXJTZXNzaW9uSWQYASAB",
            "KAQSEwoLZ2F0ZXdheU5hbWUYAiABKAkSEAoIZ2FtZU5hbWUYAyABKAkiawoZ",
            "SW50ZXJuYWxLaWNrUGxheWVyTWVzc2FnZRIXCg9wbGF5ZXJTZXNzaW9uSWQY",
            "ASABKAQSEwoLZ2F0ZXdheU5hbWUYAiABKAkSEAoIZ2FtZU5hbWUYAyABKAkS",
            "DgoGcmVhc29uGAQgASgJIlYKHUludGVybmFsS2lja0FsbFBsYXllcnNNZXNz",
            "YWdlEhMKC2dhdGV3YXlOYW1lGAEgASgJEhAKCGdhbWVOYW1lGAIgASgJEg4K",
            "BnJlYXNvbhgDIAEoCSp+CgJFQxISCg5fX0RPX05PVF9VU0VfXxAAEgYKAk9L",
            "EAESBwoDRVJSEAISFwoTU0VSVklDRV9VTkFWQUlMQUJMRRAKEhgKE1BMQVlF",
            "Ul9MT0dJTl9GQUlMRUQQ6QcSIAobUExBWUVSX0tJQ0tfTE9HSU5fRUxTRVdI",
            "RVJFEOoHKrgICgNDTUQSDAoISU5URVJOQUwQABIUCg5JTlRFUk5BTF9FUlJP",
            "UhDAhD0SJwohSU5URVJOQUxfU0VSVklDRV9SRUdJU1RFUl9SRVFVRVNUEMGE",
            "PRIoCiJJTlRFUk5BTF9TRVJWSUNFX1JFR0lTVEVSX1JFU1BPTlNFEMKEPRIm",
            "CiBJTlRFUk5BTF9TRVJWSUNFX0NMT1NFX0JST0FEQ0FTVBDDhD0SJgogSU5U",
            "RVJOQUxfU0VSVklDRV9QUk9URUNUX1JFUVVFU1QQyoQ9EiIKHElOVEVSTkFM",
            "X1BMQVlFUl9UT19HQU1FX0FVVEgQpIU9EiUKH0lOVEVSTkFMX1BMQVlFUl9U",
            "T19HQU1FX01FU1NBR0UQpYU9EiUKH0lOVEVSTkFMX0dBTUVfVE9fUExBWUVS",
            "X01FU1NBR0UQpoU9Ei8KKUlOVEVSTkFMX0dBTUVfVE9fR0FURV9NVUxUSVBM",
            "QVlFUl9NRVNTQUdFEImGPRItCidJTlRFUk5BTF9HQU1FX1RPX0dBVEVfQlJP",
            "QURDQVNUX01FU1NBR0UQioY9EiEKG0lOVEVSTkFMX1BST1hZX1NFUlZJQ0Vf",
            "U1lOQxDshj0SJwohSU5URVJOQUxfUFJPWFlfVE9fU0VSVklDRV9NRVNTQUdF",
            "EO2GPRIwCipJTlRFUk5BTF9QUk9YWV9UT19FWFRFUk5BTF9TRVJWSUNFX01F",
            "U1NBR0UQ94Y9EhoKFElOVEVSTkFMX1JQQ19SRVFVRVNUENGHPRIbChVJTlRF",
            "Uk5BTF9SUENfUkVTUE9OU0UQ0oc9EiYKIElOVEVSTkFMX1NFUlZJQ0VfVE9f",
            "R0FNRV9NRVNTQUdFELWIPRIoCiJJTlRFUk5BTF9TRVJWSUNFX1RPX1NFUlZJ",
            "Q0VfTk9USUZZEJmJPRIrCiVJTlRFUk5BTF9TRVJWSUNFX1RPX1NFUlZJQ0Vf",
            "SEVBUlRCRUFUEJqJPRIuCihJTlRFUk5BTF9NT05JVE9SX1NMQVZFX1RPX01B",
            "U1RFUl9NRVNTQUdFEP2JPRIuCihJTlRFUk5BTF9NT05JVE9SX01BU1RFUl9U",
            "T19TTEFWRV9NRVNTQUdFEP6JPRIoCiJJTlRFUk5BTF9TRVJWSUNFX1RPX0JB",
            "VFRMRV9NRVNTQUdFEOGKPRIpCiNJTlRFUk5BTF9TRVJWSUNFX1RPX01BVENI",
            "RVJfTUVTU0FHRRDFiz0SHAoWSU5URVJOQUxfUExBWUVSX0xPR09VVBCCiXoS",
            "GgoUSU5URVJOQUxfS0lDS19QTEFZRVIQhIl6Eh8KGUlOVEVSTkFMX0tJQ0tf",
            "QUxMX1BMQVlFUlMQhYl6EigKIUlOVEVSTkFMX1BMQVlFUl9UT19CQVRUTEVf",
            "TUVTU0FHRRCljrcBEigKIUlOVEVSTkFMX0JBVFRMRV9UT19QTEFZRVJfTUVT",
            "U0FHRRCmjrcBQhBaDnBiL3BiX2ludGVybmFsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbInternal.EC), typeof(global::PbInternal.CMD), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalError), global::PbInternal.InternalError.Parser, new[]{ "Command", "ErrorCode", "ErrorString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceRegisterReq), global::PbInternal.InternalServiceRegisterReq.Parser, new[]{ "ServiceType", "ServiceName", "IsPrivate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceRegisterRes), global::PbInternal.InternalServiceRegisterRes.Parser, new[]{ "ErrorCode", "ErrorString", "ServiceType", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceCloseBroadcast), global::PbInternal.InternalServiceCloseBroadcast.Parser, new[]{ "ServiceType", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceProtectReq), global::PbInternal.InternalServiceProtectReq.Parser, new[]{ "ServiceType", "ServiceName", "IsProtect", "ProtectTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalPlayerToGameMessage), global::PbInternal.InternalPlayerToGameMessage.Parser, new[]{ "PublicCommand", "PlayerSessionId", "GatewayName", "GameName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalGameToPlayerMessage), global::PbInternal.InternalGameToPlayerMessage.Parser, new[]{ "PublicCommand", "PlayerSessionId", "GatewayName", "GameName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalGameToGateMultiPlayerMessage), global::PbInternal.InternalGameToGateMultiPlayerMessage.Parser, new[]{ "PublicCommand", "GatewayName", "GameName", "PlayerSessionIds", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalGameToGateBroadcastMessage), global::PbInternal.InternalGameToGateBroadcastMessage.Parser, new[]{ "PublicCommand", "GatewayName", "GameName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalProxyServiceSync), global::PbInternal.InternalProxyServiceSync.Parser, new[]{ "ProxyName", "ServiceList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalService), global::PbInternal.InternalService.Parser, new[]{ "Type", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalProxyToServiceMessage), global::PbInternal.InternalProxyToServiceMessage.Parser, new[]{ "Command", "Sender", "Reciever", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalProxyToExternalServiceMessage), global::PbInternal.InternalProxyToExternalServiceMessage.Parser, new[]{ "Command", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalRPCMessage), global::PbInternal.InternalRPCMessage.Parser, new[]{ "Id", "Err", "CallerType", "CallerName", "ReceiverType", "ReceiverName", "FuncName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalRPCData), global::PbInternal.InternalRPCData.Parser, new[]{ "Uint64Slice", "Int64Slice", "StringSlice", "Uint64Map", "Int64Map", "StringMap", "Bytes", "Int32Map" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceToGameMessage), global::PbInternal.InternalServiceToGameMessage.Parser, new[]{ "Command", "ServiceName", "ServerId", "IsToAgent", "PlayerIds", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalServiceToServiceNotify), global::PbInternal.InternalServiceToServiceNotify.Parser, new[]{ "SenderType", "SenderName", "ReceiverType", "ReceiverName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalPlayerLogoutMessage), global::PbInternal.InternalPlayerLogoutMessage.Parser, new[]{ "PlayerSessionId", "GatewayName", "GameName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalKickPlayerMessage), global::PbInternal.InternalKickPlayerMessage.Parser, new[]{ "PlayerSessionId", "GatewayName", "GameName", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbInternal.InternalKickAllPlayersMessage), global::PbInternal.InternalKickAllPlayersMessage.Parser, new[]{ "GatewayName", "GameName", "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///====================================================
  /// 内部错误
  ///====================================================
  /// </summary>
  public enum EC {
    /// <summary>
    ///占位 如果协议中只有一个错误号且为0 好像不会生成数据 导致发送长度为0的数据
    /// </summary>
    [pbr::OriginalName("__DO_NOT_USE__")] DoNotUse = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("OK")] Ok = 1,
    /// <summary>
    ///错误
    /// </summary>
    [pbr::OriginalName("ERR")] Err = 2,
    /// <summary>
    ///服务不可用
    /// </summary>
    [pbr::OriginalName("SERVICE_UNAVAILABLE")] ServiceUnavailable = 10,
    /// <summary>
    ///用户登录失败
    /// </summary>
    [pbr::OriginalName("PLAYER_LOGIN_FAILED")] PlayerLoginFailed = 1001,
    /// <summary>
    ///踢下线 在他处登录
    /// </summary>
    [pbr::OriginalName("PLAYER_KICK_LOGIN_ELSEWHERE")] PlayerKickLoginElsewhere = 1002,
  }

  /// <summary>
  ///====================================================
  /// 内部消息类型
  ///====================================================
  /// </summary>
  public enum CMD {
    /// <summary>
    ///引擎内部消息 不可使用
    /// </summary>
    [pbr::OriginalName("INTERNAL")] Internal = 0,
    /// <summary>
    ///内部协议
    /// </summary>
    [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 1000000,
    /// <summary>
    ///服务注册请求
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_REGISTER_REQUEST")] InternalServiceRegisterRequest = 1000001,
    /// <summary>
    ///服务注册返回
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_REGISTER_RESPONSE")] InternalServiceRegisterResponse = 1000002,
    /// <summary>
    ///服务关闭广播消息 proxy接收后需要广播给下属服务
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_CLOSE_BROADCAST")] InternalServiceCloseBroadcast = 1000003,
    /// <summary>
    ///服务开启过载保护请求
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_PROTECT_REQUEST")] InternalServiceProtectRequest = 1000010,
    /// <summary>
    ///玩家给游戏服的Auth消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PLAYER_TO_GAME_AUTH")] InternalPlayerToGameAuth = 1000100,
    /// <summary>
    ///玩家给游戏服的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PLAYER_TO_GAME_MESSAGE")] InternalPlayerToGameMessage = 1000101,
    /// <summary>
    ///游戏服发送给玩家的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_GAME_TO_PLAYER_MESSAGE")] InternalGameToPlayerMessage = 1000102,
    /// <summary>
    ///游戏服发送给网关多个玩家的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_GAME_TO_GATE_MULTIPLAYER_MESSAGE")] InternalGameToGateMultiplayerMessage = 1000201,
    /// <summary>
    ///游戏服发送给网关广播消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_GAME_TO_GATE_BROADCAST_MESSAGE")] InternalGameToGateBroadcastMessage = 1000202,
    /// <summary>
    ///代理与代理之间的服务同步消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PROXY_SERVICE_SYNC")] InternalProxyServiceSync = 1000300,
    /// <summary>
    ///代理发送给所属服务的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PROXY_TO_SERVICE_MESSAGE")] InternalProxyToServiceMessage = 1000301,
    /// <summary>
    ///代理发送给其他代理所属服务的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PROXY_TO_EXTERNAL_SERVICE_MESSAGE")] InternalProxyToExternalServiceMessage = 1000311,
    /// <summary>
    ///RPC请求
    /// </summary>
    [pbr::OriginalName("INTERNAL_RPC_REQUEST")] InternalRpcRequest = 1000401,
    /// <summary>
    ///RPC请求返回
    /// </summary>
    [pbr::OriginalName("INTERNAL_RPC_RESPONSE")] InternalRpcResponse = 1000402,
    /// <summary>
    ///服务发送给游戏的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_TO_GAME_MESSAGE")] InternalServiceToGameMessage = 1000501,
    /// <summary>
    ///服务发送给服务的通知
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_TO_SERVICE_NOTIFY")] InternalServiceToServiceNotify = 1000601,
    /// <summary>
    ///服务发送给服务的心跳
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_TO_SERVICE_HEARTBEAT")] InternalServiceToServiceHeartbeat = 1000602,
    /// <summary>
    ///监控slave到master的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_MONITOR_SLAVE_TO_MASTER_MESSAGE")] InternalMonitorSlaveToMasterMessage = 1000701,
    /// <summary>
    ///监控master到slave的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_MONITOR_MASTER_TO_SLAVE_MESSAGE")] InternalMonitorMasterToSlaveMessage = 1000702,
    /// <summary>
    ///服务发送给战斗服的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_TO_BATTLE_MESSAGE")] InternalServiceToBattleMessage = 1000801,
    /// <summary>
    ///服务发送给匹配服的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_SERVICE_TO_MATCHER_MESSAGE")] InternalServiceToMatcherMessage = 1000901,
    /// <summary>
    ///用户登出 由网关发出
    /// </summary>
    [pbr::OriginalName("INTERNAL_PLAYER_LOGOUT")] InternalPlayerLogout = 2000002,
    /// <summary>
    ///踢用户下线 由游戏或者代理发出
    /// </summary>
    [pbr::OriginalName("INTERNAL_KICK_PLAYER")] InternalKickPlayer = 2000004,
    /// <summary>
    ///踢所有用户下线 由游戏或者代理发出
    /// </summary>
    [pbr::OriginalName("INTERNAL_KICK_ALL_PLAYERS")] InternalKickAllPlayers = 2000005,
    /// <summary>
    ///玩家给战斗服的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_PLAYER_TO_BATTLE_MESSAGE")] InternalPlayerToBattleMessage = 3000101,
    /// <summary>
    ///战斗服发送给玩家的消息
    /// </summary>
    [pbr::OriginalName("INTERNAL_BATTLE_TO_PLAYER_MESSAGE")] InternalBattleToPlayerMessage = 3000102,
  }

  #endregion

  #region Messages
  /// <summary>
  ///内部错误
  /// </summary>
  public sealed partial class InternalError : pb::IMessage<InternalError> {
    private static readonly pb::MessageParser<InternalError> _parser = new pb::MessageParser<InternalError>(() => new InternalError());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError(InternalError other) : this() {
      command_ = other.command_;
      errorCode_ = other.errorCode_;
      errorString_ = other.errorString_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalError Clone() {
      return new InternalError(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::PbInternal.CMD command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.CMD Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::PbInternal.EC errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.EC ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorString" field.</summary>
    public const int ErrorStringFieldNumber = 3;
    private string errorString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorString {
      get { return errorString_; }
      set {
        errorString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorString != other.ErrorString) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorString.Length != 0) hash ^= ErrorString.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (ErrorString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (ErrorString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalError other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorString.Length != 0) {
        ErrorString = other.ErrorString;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::PbInternal.CMD) input.ReadEnum();
            break;
          }
          case 16: {
            errorCode_ = (global::PbInternal.EC) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务注册请求
  /// </summary>
  public sealed partial class InternalServiceRegisterReq : pb::IMessage<InternalServiceRegisterReq> {
    private static readonly pb::MessageParser<InternalServiceRegisterReq> _parser = new pb::MessageParser<InternalServiceRegisterReq>(() => new InternalServiceRegisterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceRegisterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterReq(InternalServiceRegisterReq other) : this() {
      serviceType_ = other.serviceType_;
      serviceName_ = other.serviceName_;
      isPrivate_ = other.isPrivate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterReq Clone() {
      return new InternalServiceRegisterReq(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private string serviceType_ = "";
    /// <summary>
    ///服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///服务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPrivate" field.</summary>
    public const int IsPrivateFieldNumber = 3;
    private bool isPrivate_;
    /// <summary>
    ///私有服务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceRegisterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceRegisterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      if (ServiceName != other.ServiceName) return false;
      if (IsPrivate != other.IsPrivate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceType);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPrivate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceRegisterReq other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceType = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 24: {
            IsPrivate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务注册请求返回
  /// </summary>
  public sealed partial class InternalServiceRegisterRes : pb::IMessage<InternalServiceRegisterRes> {
    private static readonly pb::MessageParser<InternalServiceRegisterRes> _parser = new pb::MessageParser<InternalServiceRegisterRes>(() => new InternalServiceRegisterRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceRegisterRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterRes(InternalServiceRegisterRes other) : this() {
      errorCode_ = other.errorCode_;
      errorString_ = other.errorString_;
      serviceType_ = other.serviceType_;
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceRegisterRes Clone() {
      return new InternalServiceRegisterRes(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::PbInternal.EC errorCode_ = 0;
    /// <summary>
    ///错误号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.EC ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "errorString" field.</summary>
    public const int ErrorStringFieldNumber = 2;
    private string errorString_ = "";
    /// <summary>
    ///错误描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorString {
      get { return errorString_; }
      set {
        errorString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private string serviceType_ = "";
    /// <summary>
    ///服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 4;
    private string serviceName_ = "";
    /// <summary>
    ///服务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceRegisterRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceRegisterRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorString != other.ErrorString) return false;
      if (ServiceType != other.ServiceType) return false;
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorString.Length != 0) hash ^= ErrorString.GetHashCode();
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (ErrorString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorString);
      }
      if (ServiceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceType);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (ErrorString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorString);
      }
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceRegisterRes other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorString.Length != 0) {
        ErrorString = other.ErrorString;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errorCode_ = (global::PbInternal.EC) input.ReadEnum();
            break;
          }
          case 18: {
            ErrorString = input.ReadString();
            break;
          }
          case 26: {
            ServiceType = input.ReadString();
            break;
          }
          case 34: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务关闭广播消息
  /// </summary>
  public sealed partial class InternalServiceCloseBroadcast : pb::IMessage<InternalServiceCloseBroadcast> {
    private static readonly pb::MessageParser<InternalServiceCloseBroadcast> _parser = new pb::MessageParser<InternalServiceCloseBroadcast>(() => new InternalServiceCloseBroadcast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceCloseBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceCloseBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceCloseBroadcast(InternalServiceCloseBroadcast other) : this() {
      serviceType_ = other.serviceType_;
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceCloseBroadcast Clone() {
      return new InternalServiceCloseBroadcast(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private string serviceType_ = "";
    /// <summary>
    ///服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///服务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceCloseBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceCloseBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceType);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceCloseBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceType = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务开启过载保护请求
  /// </summary>
  public sealed partial class InternalServiceProtectReq : pb::IMessage<InternalServiceProtectReq> {
    private static readonly pb::MessageParser<InternalServiceProtectReq> _parser = new pb::MessageParser<InternalServiceProtectReq>(() => new InternalServiceProtectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceProtectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceProtectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceProtectReq(InternalServiceProtectReq other) : this() {
      serviceType_ = other.serviceType_;
      serviceName_ = other.serviceName_;
      isProtect_ = other.isProtect_;
      protectTime_ = other.protectTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceProtectReq Clone() {
      return new InternalServiceProtectReq(this);
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 1;
    private string serviceType_ = "";
    /// <summary>
    ///服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    ///服务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isProtect" field.</summary>
    public const int IsProtectFieldNumber = 3;
    private bool isProtect_;
    /// <summary>
    ///是否开启保护
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProtect {
      get { return isProtect_; }
      set {
        isProtect_ = value;
      }
    }

    /// <summary>Field number for the "protectTime" field.</summary>
    public const int ProtectTimeFieldNumber = 4;
    private int protectTime_;
    /// <summary>
    ///保护时间秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtectTime {
      get { return protectTime_; }
      set {
        protectTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceProtectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceProtectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceType != other.ServiceType) return false;
      if (ServiceName != other.ServiceName) return false;
      if (IsProtect != other.IsProtect) return false;
      if (ProtectTime != other.ProtectTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceType.Length != 0) hash ^= ServiceType.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (IsProtect != false) hash ^= IsProtect.GetHashCode();
      if (ProtectTime != 0) hash ^= ProtectTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceType);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (IsProtect != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsProtect);
      }
      if (ProtectTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProtectTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (IsProtect != false) {
        size += 1 + 1;
      }
      if (ProtectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtectTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceProtectReq other) {
      if (other == null) {
        return;
      }
      if (other.ServiceType.Length != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.IsProtect != false) {
        IsProtect = other.IsProtect;
      }
      if (other.ProtectTime != 0) {
        ProtectTime = other.ProtectTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceType = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 24: {
            IsProtect = input.ReadBool();
            break;
          }
          case 32: {
            ProtectTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家发送给游戏服的消息
  /// </summary>
  public sealed partial class InternalPlayerToGameMessage : pb::IMessage<InternalPlayerToGameMessage> {
    private static readonly pb::MessageParser<InternalPlayerToGameMessage> _parser = new pb::MessageParser<InternalPlayerToGameMessage>(() => new InternalPlayerToGameMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalPlayerToGameMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerToGameMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerToGameMessage(InternalPlayerToGameMessage other) : this() {
      publicCommand_ = other.publicCommand_;
      playerSessionId_ = other.playerSessionId_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerToGameMessage Clone() {
      return new InternalPlayerToGameMessage(this);
    }

    /// <summary>Field number for the "publicCommand" field.</summary>
    public const int PublicCommandFieldNumber = 1;
    private int publicCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicCommand {
      get { return publicCommand_; }
      set {
        publicCommand_ = value;
      }
    }

    /// <summary>Field number for the "playerSessionId" field.</summary>
    public const int PlayerSessionIdFieldNumber = 2;
    private ulong playerSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 3;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 4;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalPlayerToGameMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalPlayerToGameMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicCommand != other.PublicCommand) return false;
      if (PlayerSessionId != other.PlayerSessionId) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicCommand != 0) hash ^= PublicCommand.GetHashCode();
      if (PlayerSessionId != 0UL) hash ^= PlayerSessionId.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicCommand != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicCommand);
      }
      if (PlayerSessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicCommand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicCommand);
      }
      if (PlayerSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalPlayerToGameMessage other) {
      if (other == null) {
        return;
      }
      if (other.PublicCommand != 0) {
        PublicCommand = other.PublicCommand;
      }
      if (other.PlayerSessionId != 0UL) {
        PlayerSessionId = other.PlayerSessionId;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PublicCommand = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerSessionId = input.ReadUInt64();
            break;
          }
          case 26: {
            GatewayName = input.ReadString();
            break;
          }
          case 34: {
            GameName = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏发送给玩家的消息
  /// </summary>
  public sealed partial class InternalGameToPlayerMessage : pb::IMessage<InternalGameToPlayerMessage> {
    private static readonly pb::MessageParser<InternalGameToPlayerMessage> _parser = new pb::MessageParser<InternalGameToPlayerMessage>(() => new InternalGameToPlayerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalGameToPlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToPlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToPlayerMessage(InternalGameToPlayerMessage other) : this() {
      publicCommand_ = other.publicCommand_;
      playerSessionId_ = other.playerSessionId_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToPlayerMessage Clone() {
      return new InternalGameToPlayerMessage(this);
    }

    /// <summary>Field number for the "publicCommand" field.</summary>
    public const int PublicCommandFieldNumber = 1;
    private int publicCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicCommand {
      get { return publicCommand_; }
      set {
        publicCommand_ = value;
      }
    }

    /// <summary>Field number for the "playerSessionId" field.</summary>
    public const int PlayerSessionIdFieldNumber = 2;
    private ulong playerSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 3;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 4;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalGameToPlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalGameToPlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicCommand != other.PublicCommand) return false;
      if (PlayerSessionId != other.PlayerSessionId) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicCommand != 0) hash ^= PublicCommand.GetHashCode();
      if (PlayerSessionId != 0UL) hash ^= PlayerSessionId.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicCommand != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicCommand);
      }
      if (PlayerSessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicCommand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicCommand);
      }
      if (PlayerSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalGameToPlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.PublicCommand != 0) {
        PublicCommand = other.PublicCommand;
      }
      if (other.PlayerSessionId != 0UL) {
        PlayerSessionId = other.PlayerSessionId;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PublicCommand = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerSessionId = input.ReadUInt64();
            break;
          }
          case 26: {
            GatewayName = input.ReadString();
            break;
          }
          case 34: {
            GameName = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服发送给网关多个玩家的消息
  /// </summary>
  public sealed partial class InternalGameToGateMultiPlayerMessage : pb::IMessage<InternalGameToGateMultiPlayerMessage> {
    private static readonly pb::MessageParser<InternalGameToGateMultiPlayerMessage> _parser = new pb::MessageParser<InternalGameToGateMultiPlayerMessage>(() => new InternalGameToGateMultiPlayerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalGameToGateMultiPlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateMultiPlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateMultiPlayerMessage(InternalGameToGateMultiPlayerMessage other) : this() {
      publicCommand_ = other.publicCommand_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      playerSessionIds_ = other.playerSessionIds_.Clone();
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateMultiPlayerMessage Clone() {
      return new InternalGameToGateMultiPlayerMessage(this);
    }

    /// <summary>Field number for the "publicCommand" field.</summary>
    public const int PublicCommandFieldNumber = 1;
    private int publicCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicCommand {
      get { return publicCommand_; }
      set {
        publicCommand_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 2;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerSessionIds" field.</summary>
    public const int PlayerSessionIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_playerSessionIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> playerSessionIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PlayerSessionIds {
      get { return playerSessionIds_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalGameToGateMultiPlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalGameToGateMultiPlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicCommand != other.PublicCommand) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if(!playerSessionIds_.Equals(other.playerSessionIds_)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicCommand != 0) hash ^= PublicCommand.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      hash ^= playerSessionIds_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicCommand != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicCommand);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
      playerSessionIds_.WriteTo(output, _repeated_playerSessionIds_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicCommand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicCommand);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      size += playerSessionIds_.CalculateSize(_repeated_playerSessionIds_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalGameToGateMultiPlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.PublicCommand != 0) {
        PublicCommand = other.PublicCommand;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      playerSessionIds_.Add(other.playerSessionIds_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PublicCommand = input.ReadInt32();
            break;
          }
          case 18: {
            GatewayName = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            playerSessionIds_.AddEntriesFrom(input, _repeated_playerSessionIds_codec);
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服发送给网关广播消息
  /// </summary>
  public sealed partial class InternalGameToGateBroadcastMessage : pb::IMessage<InternalGameToGateBroadcastMessage> {
    private static readonly pb::MessageParser<InternalGameToGateBroadcastMessage> _parser = new pb::MessageParser<InternalGameToGateBroadcastMessage>(() => new InternalGameToGateBroadcastMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalGameToGateBroadcastMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateBroadcastMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateBroadcastMessage(InternalGameToGateBroadcastMessage other) : this() {
      publicCommand_ = other.publicCommand_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalGameToGateBroadcastMessage Clone() {
      return new InternalGameToGateBroadcastMessage(this);
    }

    /// <summary>Field number for the "publicCommand" field.</summary>
    public const int PublicCommandFieldNumber = 1;
    private int publicCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicCommand {
      get { return publicCommand_; }
      set {
        publicCommand_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 2;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalGameToGateBroadcastMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalGameToGateBroadcastMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicCommand != other.PublicCommand) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicCommand != 0) hash ^= PublicCommand.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicCommand != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PublicCommand);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicCommand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicCommand);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalGameToGateBroadcastMessage other) {
      if (other == null) {
        return;
      }
      if (other.PublicCommand != 0) {
        PublicCommand = other.PublicCommand;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PublicCommand = input.ReadInt32();
            break;
          }
          case 18: {
            GatewayName = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///代理与代理之间的服务同步消息
  /// </summary>
  public sealed partial class InternalProxyServiceSync : pb::IMessage<InternalProxyServiceSync> {
    private static readonly pb::MessageParser<InternalProxyServiceSync> _parser = new pb::MessageParser<InternalProxyServiceSync>(() => new InternalProxyServiceSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalProxyServiceSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyServiceSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyServiceSync(InternalProxyServiceSync other) : this() {
      proxyName_ = other.proxyName_;
      serviceList_ = other.serviceList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyServiceSync Clone() {
      return new InternalProxyServiceSync(this);
    }

    /// <summary>Field number for the "proxyName" field.</summary>
    public const int ProxyNameFieldNumber = 1;
    private string proxyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProxyName {
      get { return proxyName_; }
      set {
        proxyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceList" field.</summary>
    public const int ServiceListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbInternal.InternalService> _repeated_serviceList_codec
        = pb::FieldCodec.ForMessage(18, global::PbInternal.InternalService.Parser);
    private readonly pbc::RepeatedField<global::PbInternal.InternalService> serviceList_ = new pbc::RepeatedField<global::PbInternal.InternalService>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbInternal.InternalService> ServiceList {
      get { return serviceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalProxyServiceSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalProxyServiceSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProxyName != other.ProxyName) return false;
      if(!serviceList_.Equals(other.serviceList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProxyName.Length != 0) hash ^= ProxyName.GetHashCode();
      hash ^= serviceList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProxyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProxyName);
      }
      serviceList_.WriteTo(output, _repeated_serviceList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProxyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxyName);
      }
      size += serviceList_.CalculateSize(_repeated_serviceList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalProxyServiceSync other) {
      if (other == null) {
        return;
      }
      if (other.ProxyName.Length != 0) {
        ProxyName = other.ProxyName;
      }
      serviceList_.Add(other.serviceList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProxyName = input.ReadString();
            break;
          }
          case 18: {
            serviceList_.AddEntriesFrom(input, _repeated_serviceList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InternalService : pb::IMessage<InternalService> {
    private static readonly pb::MessageParser<InternalService> _parser = new pb::MessageParser<InternalService>(() => new InternalService());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalService(InternalService other) : this() {
      type_ = other.type_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalService Clone() {
      return new InternalService(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalService other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///代理发送给所属服务的消息
  /// </summary>
  public sealed partial class InternalProxyToServiceMessage : pb::IMessage<InternalProxyToServiceMessage> {
    private static readonly pb::MessageParser<InternalProxyToServiceMessage> _parser = new pb::MessageParser<InternalProxyToServiceMessage>(() => new InternalProxyToServiceMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalProxyToServiceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToServiceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToServiceMessage(InternalProxyToServiceMessage other) : this() {
      command_ = other.command_;
      sender_ = other.sender_;
      reciever_ = other.reciever_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToServiceMessage Clone() {
      return new InternalProxyToServiceMessage(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::PbInternal.CMD command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.CMD Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private string sender_ = "";
    /// <summary>
    ///发送者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sender {
      get { return sender_; }
      set {
        sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int RecieverFieldNumber = 3;
    private string reciever_ = "";
    /// <summary>
    ///接收者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reciever {
      get { return reciever_; }
      set {
        reciever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalProxyToServiceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalProxyToServiceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Sender != other.Sender) return false;
      if (Reciever != other.Reciever) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Sender.Length != 0) hash ^= Sender.GetHashCode();
      if (Reciever.Length != 0) hash ^= Reciever.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Sender.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sender);
      }
      if (Reciever.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reciever);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Sender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
      }
      if (Reciever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reciever);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalProxyToServiceMessage other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Sender.Length != 0) {
        Sender = other.Sender;
      }
      if (other.Reciever.Length != 0) {
        Reciever = other.Reciever;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::PbInternal.CMD) input.ReadEnum();
            break;
          }
          case 18: {
            Sender = input.ReadString();
            break;
          }
          case 26: {
            Reciever = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///代理发送给其他代理所属服务的请求
  /// </summary>
  public sealed partial class InternalProxyToExternalServiceMessage : pb::IMessage<InternalProxyToExternalServiceMessage> {
    private static readonly pb::MessageParser<InternalProxyToExternalServiceMessage> _parser = new pb::MessageParser<InternalProxyToExternalServiceMessage>(() => new InternalProxyToExternalServiceMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalProxyToExternalServiceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToExternalServiceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToExternalServiceMessage(InternalProxyToExternalServiceMessage other) : this() {
      command_ = other.command_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalProxyToExternalServiceMessage Clone() {
      return new InternalProxyToExternalServiceMessage(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::PbInternal.CMD command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.CMD Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalProxyToExternalServiceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalProxyToExternalServiceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalProxyToExternalServiceMessage other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::PbInternal.CMD) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///RPC消息
  /// </summary>
  public sealed partial class InternalRPCMessage : pb::IMessage<InternalRPCMessage> {
    private static readonly pb::MessageParser<InternalRPCMessage> _parser = new pb::MessageParser<InternalRPCMessage>(() => new InternalRPCMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalRPCMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCMessage(InternalRPCMessage other) : this() {
      id_ = other.id_;
      err_ = other.err_;
      callerType_ = other.callerType_;
      callerName_ = other.callerName_;
      receiverType_ = other.receiverType_;
      receiverName_ = other.receiverName_;
      funcName_ = other.funcName_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCMessage Clone() {
      return new InternalRPCMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 2;
    private string err_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callerType" field.</summary>
    public const int CallerTypeFieldNumber = 3;
    private string callerType_ = "";
    /// <summary>
    ///调用发起者服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallerType {
      get { return callerType_; }
      set {
        callerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callerName" field.</summary>
    public const int CallerNameFieldNumber = 4;
    private string callerName_ = "";
    /// <summary>
    ///调用发起者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallerName {
      get { return callerName_; }
      set {
        callerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiverType" field.</summary>
    public const int ReceiverTypeFieldNumber = 5;
    private string receiverType_ = "";
    /// <summary>
    ///调用接收者服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceiverType {
      get { return receiverType_; }
      set {
        receiverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiverName" field.</summary>
    public const int ReceiverNameFieldNumber = 6;
    private string receiverName_ = "";
    /// <summary>
    ///调用接收者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceiverName {
      get { return receiverName_; }
      set {
        receiverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funcName" field.</summary>
    public const int FuncNameFieldNumber = 7;
    private string funcName_ = "";
    /// <summary>
    ///调用的方法名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FuncName {
      get { return funcName_; }
      set {
        funcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private global::PbInternal.InternalRPCData data_;
    /// <summary>
    ///数据 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.InternalRPCData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalRPCMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalRPCMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Err != other.Err) return false;
      if (CallerType != other.CallerType) return false;
      if (CallerName != other.CallerName) return false;
      if (ReceiverType != other.ReceiverType) return false;
      if (ReceiverName != other.ReceiverName) return false;
      if (FuncName != other.FuncName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (CallerType.Length != 0) hash ^= CallerType.GetHashCode();
      if (CallerName.Length != 0) hash ^= CallerName.GetHashCode();
      if (ReceiverType.Length != 0) hash ^= ReceiverType.GetHashCode();
      if (ReceiverName.Length != 0) hash ^= ReceiverName.GetHashCode();
      if (FuncName.Length != 0) hash ^= FuncName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Err.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Err);
      }
      if (CallerType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CallerType);
      }
      if (CallerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CallerName);
      }
      if (ReceiverType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReceiverType);
      }
      if (ReceiverName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ReceiverName);
      }
      if (FuncName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FuncName);
      }
      if (data_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (CallerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallerType);
      }
      if (CallerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallerName);
      }
      if (ReceiverType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverType);
      }
      if (ReceiverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverName);
      }
      if (FuncName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FuncName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalRPCMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      if (other.CallerType.Length != 0) {
        CallerType = other.CallerType;
      }
      if (other.CallerName.Length != 0) {
        CallerName = other.CallerName;
      }
      if (other.ReceiverType.Length != 0) {
        ReceiverType = other.ReceiverType;
      }
      if (other.ReceiverName.Length != 0) {
        ReceiverName = other.ReceiverName;
      }
      if (other.FuncName.Length != 0) {
        FuncName = other.FuncName;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::PbInternal.InternalRPCData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Err = input.ReadString();
            break;
          }
          case 26: {
            CallerType = input.ReadString();
            break;
          }
          case 34: {
            CallerName = input.ReadString();
            break;
          }
          case 42: {
            ReceiverType = input.ReadString();
            break;
          }
          case 50: {
            ReceiverName = input.ReadString();
            break;
          }
          case 58: {
            FuncName = input.ReadString();
            break;
          }
          case 66: {
            if (data_ == null) {
              data_ = new global::PbInternal.InternalRPCData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///RPC数据
  /// </summary>
  public sealed partial class InternalRPCData : pb::IMessage<InternalRPCData> {
    private static readonly pb::MessageParser<InternalRPCData> _parser = new pb::MessageParser<InternalRPCData>(() => new InternalRPCData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalRPCData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCData(InternalRPCData other) : this() {
      uint64Slice_ = other.uint64Slice_.Clone();
      int64Slice_ = other.int64Slice_.Clone();
      stringSlice_ = other.stringSlice_.Clone();
      uint64Map_ = other.uint64Map_.Clone();
      int64Map_ = other.int64Map_.Clone();
      stringMap_ = other.stringMap_.Clone();
      bytes_ = other.bytes_;
      int32Map_ = other.int32Map_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalRPCData Clone() {
      return new InternalRPCData(this);
    }

    /// <summary>Field number for the "uint64Slice" field.</summary>
    public const int Uint64SliceFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_uint64Slice_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> uint64Slice_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Uint64Slice {
      get { return uint64Slice_; }
    }

    /// <summary>Field number for the "int64Slice" field.</summary>
    public const int Int64SliceFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_int64Slice_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> int64Slice_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Int64Slice {
      get { return int64Slice_; }
    }

    /// <summary>Field number for the "stringSlice" field.</summary>
    public const int StringSliceFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_stringSlice_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> stringSlice_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringSlice {
      get { return stringSlice_; }
    }

    /// <summary>Field number for the "uint64Map" field.</summary>
    public const int Uint64MapFieldNumber = 4;
    private static readonly pbc::MapField<string, ulong>.Codec _map_uint64Map_codec
        = new pbc::MapField<string, ulong>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt64(16), 34);
    private readonly pbc::MapField<string, ulong> uint64Map_ = new pbc::MapField<string, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, ulong> Uint64Map {
      get { return uint64Map_; }
    }

    /// <summary>Field number for the "int64Map" field.</summary>
    public const int Int64MapFieldNumber = 5;
    private static readonly pbc::MapField<string, long>.Codec _map_int64Map_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 42);
    private readonly pbc::MapField<string, long> int64Map_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Int64Map {
      get { return int64Map_; }
    }

    /// <summary>Field number for the "stringMap" field.</summary>
    public const int StringMapFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_stringMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> stringMap_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StringMap {
      get { return stringMap_; }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 7;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return bytes_; }
      set {
        bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "int32Map" field.</summary>
    public const int Int32MapFieldNumber = 8;
    private static readonly pbc::MapField<int, string>.Codec _map_int32Map_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 66);
    private readonly pbc::MapField<int, string> int32Map_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Int32Map {
      get { return int32Map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalRPCData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalRPCData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uint64Slice_.Equals(other.uint64Slice_)) return false;
      if(!int64Slice_.Equals(other.int64Slice_)) return false;
      if(!stringSlice_.Equals(other.stringSlice_)) return false;
      if (!Uint64Map.Equals(other.Uint64Map)) return false;
      if (!Int64Map.Equals(other.Int64Map)) return false;
      if (!StringMap.Equals(other.StringMap)) return false;
      if (Bytes != other.Bytes) return false;
      if (!Int32Map.Equals(other.Int32Map)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uint64Slice_.GetHashCode();
      hash ^= int64Slice_.GetHashCode();
      hash ^= stringSlice_.GetHashCode();
      hash ^= Uint64Map.GetHashCode();
      hash ^= Int64Map.GetHashCode();
      hash ^= StringMap.GetHashCode();
      if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
      hash ^= Int32Map.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uint64Slice_.WriteTo(output, _repeated_uint64Slice_codec);
      int64Slice_.WriteTo(output, _repeated_int64Slice_codec);
      stringSlice_.WriteTo(output, _repeated_stringSlice_codec);
      uint64Map_.WriteTo(output, _map_uint64Map_codec);
      int64Map_.WriteTo(output, _map_int64Map_codec);
      stringMap_.WriteTo(output, _map_stringMap_codec);
      if (Bytes.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Bytes);
      }
      int32Map_.WriteTo(output, _map_int32Map_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uint64Slice_.CalculateSize(_repeated_uint64Slice_codec);
      size += int64Slice_.CalculateSize(_repeated_int64Slice_codec);
      size += stringSlice_.CalculateSize(_repeated_stringSlice_codec);
      size += uint64Map_.CalculateSize(_map_uint64Map_codec);
      size += int64Map_.CalculateSize(_map_int64Map_codec);
      size += stringMap_.CalculateSize(_map_stringMap_codec);
      if (Bytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      size += int32Map_.CalculateSize(_map_int32Map_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalRPCData other) {
      if (other == null) {
        return;
      }
      uint64Slice_.Add(other.uint64Slice_);
      int64Slice_.Add(other.int64Slice_);
      stringSlice_.Add(other.stringSlice_);
      uint64Map_.Add(other.uint64Map_);
      int64Map_.Add(other.int64Map_);
      stringMap_.Add(other.stringMap_);
      if (other.Bytes.Length != 0) {
        Bytes = other.Bytes;
      }
      int32Map_.Add(other.int32Map_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uint64Slice_.AddEntriesFrom(input, _repeated_uint64Slice_codec);
            break;
          }
          case 18:
          case 16: {
            int64Slice_.AddEntriesFrom(input, _repeated_int64Slice_codec);
            break;
          }
          case 26: {
            stringSlice_.AddEntriesFrom(input, _repeated_stringSlice_codec);
            break;
          }
          case 34: {
            uint64Map_.AddEntriesFrom(input, _map_uint64Map_codec);
            break;
          }
          case 42: {
            int64Map_.AddEntriesFrom(input, _map_int64Map_codec);
            break;
          }
          case 50: {
            stringMap_.AddEntriesFrom(input, _map_stringMap_codec);
            break;
          }
          case 58: {
            Bytes = input.ReadBytes();
            break;
          }
          case 66: {
            int32Map_.AddEntriesFrom(input, _map_int32Map_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务发送给游戏服的消息
  /// </summary>
  public sealed partial class InternalServiceToGameMessage : pb::IMessage<InternalServiceToGameMessage> {
    private static readonly pb::MessageParser<InternalServiceToGameMessage> _parser = new pb::MessageParser<InternalServiceToGameMessage>(() => new InternalServiceToGameMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceToGameMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToGameMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToGameMessage(InternalServiceToGameMessage other) : this() {
      command_ = other.command_;
      serviceName_ = other.serviceName_;
      serverId_ = other.serverId_;
      isToAgent_ = other.isToAgent_;
      playerIds_ = other.playerIds_.Clone();
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToGameMessage Clone() {
      return new InternalServiceToGameMessage(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private int command_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 3;
    private long serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "isToAgent" field.</summary>
    public const int IsToAgentFieldNumber = 4;
    private bool isToAgent_;
    /// <summary>
    ///是否是发送给agent的消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToAgent {
      get { return isToAgent_; }
      set {
        isToAgent_ = value;
      }
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> playerIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceToGameMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceToGameMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (ServiceName != other.ServiceName) return false;
      if (ServerId != other.ServerId) return false;
      if (IsToAgent != other.IsToAgent) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ServerId != 0L) hash ^= ServerId.GetHashCode();
      if (IsToAgent != false) hash ^= IsToAgent.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Command);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ServerId);
      }
      if (IsToAgent != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsToAgent);
      }
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Command);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ServerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerId);
      }
      if (IsToAgent != false) {
        size += 1 + 1;
      }
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceToGameMessage other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ServerId != 0L) {
        ServerId = other.ServerId;
      }
      if (other.IsToAgent != false) {
        IsToAgent = other.IsToAgent;
      }
      playerIds_.Add(other.playerIds_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Command = input.ReadInt32();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 24: {
            ServerId = input.ReadInt64();
            break;
          }
          case 32: {
            IsToAgent = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务发送给服务的通知
  /// </summary>
  public sealed partial class InternalServiceToServiceNotify : pb::IMessage<InternalServiceToServiceNotify> {
    private static readonly pb::MessageParser<InternalServiceToServiceNotify> _parser = new pb::MessageParser<InternalServiceToServiceNotify>(() => new InternalServiceToServiceNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalServiceToServiceNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToServiceNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToServiceNotify(InternalServiceToServiceNotify other) : this() {
      senderType_ = other.senderType_;
      senderName_ = other.senderName_;
      receiverType_ = other.receiverType_;
      receiverName_ = other.receiverName_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalServiceToServiceNotify Clone() {
      return new InternalServiceToServiceNotify(this);
    }

    /// <summary>Field number for the "senderType" field.</summary>
    public const int SenderTypeFieldNumber = 1;
    private string senderType_ = "";
    /// <summary>
    ///发送者服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderType {
      get { return senderType_; }
      set {
        senderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 2;
    private string senderName_ = "";
    /// <summary>
    ///发送者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiverType" field.</summary>
    public const int ReceiverTypeFieldNumber = 3;
    private string receiverType_ = "";
    /// <summary>
    ///接收者服务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceiverType {
      get { return receiverType_; }
      set {
        receiverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiverName" field.</summary>
    public const int ReceiverNameFieldNumber = 4;
    private string receiverName_ = "";
    /// <summary>
    ///接收者服务名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceiverName {
      get { return receiverName_; }
      set {
        receiverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::PbInternal.InternalRPCData data_;
    /// <summary>
    ///数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbInternal.InternalRPCData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalServiceToServiceNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalServiceToServiceNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderType != other.SenderType) return false;
      if (SenderName != other.SenderName) return false;
      if (ReceiverType != other.ReceiverType) return false;
      if (ReceiverName != other.ReceiverName) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderType.Length != 0) hash ^= SenderType.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (ReceiverType.Length != 0) hash ^= ReceiverType.GetHashCode();
      if (ReceiverName.Length != 0) hash ^= ReceiverName.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderType);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (ReceiverType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReceiverType);
      }
      if (ReceiverName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReceiverName);
      }
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderType);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (ReceiverType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverType);
      }
      if (ReceiverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalServiceToServiceNotify other) {
      if (other == null) {
        return;
      }
      if (other.SenderType.Length != 0) {
        SenderType = other.SenderType;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.ReceiverType.Length != 0) {
        ReceiverType = other.ReceiverType;
      }
      if (other.ReceiverName.Length != 0) {
        ReceiverName = other.ReceiverName;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::PbInternal.InternalRPCData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SenderType = input.ReadString();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 26: {
            ReceiverType = input.ReadString();
            break;
          }
          case 34: {
            ReceiverName = input.ReadString();
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::PbInternal.InternalRPCData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登出消息
  /// </summary>
  public sealed partial class InternalPlayerLogoutMessage : pb::IMessage<InternalPlayerLogoutMessage> {
    private static readonly pb::MessageParser<InternalPlayerLogoutMessage> _parser = new pb::MessageParser<InternalPlayerLogoutMessage>(() => new InternalPlayerLogoutMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalPlayerLogoutMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerLogoutMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerLogoutMessage(InternalPlayerLogoutMessage other) : this() {
      playerSessionId_ = other.playerSessionId_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPlayerLogoutMessage Clone() {
      return new InternalPlayerLogoutMessage(this);
    }

    /// <summary>Field number for the "playerSessionId" field.</summary>
    public const int PlayerSessionIdFieldNumber = 1;
    private ulong playerSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 2;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalPlayerLogoutMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalPlayerLogoutMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerSessionId != other.PlayerSessionId) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerSessionId != 0UL) hash ^= PlayerSessionId.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerSessionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalPlayerLogoutMessage other) {
      if (other == null) {
        return;
      }
      if (other.PlayerSessionId != 0UL) {
        PlayerSessionId = other.PlayerSessionId;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerSessionId = input.ReadUInt64();
            break;
          }
          case 18: {
            GatewayName = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踢下线消息
  /// </summary>
  public sealed partial class InternalKickPlayerMessage : pb::IMessage<InternalKickPlayerMessage> {
    private static readonly pb::MessageParser<InternalKickPlayerMessage> _parser = new pb::MessageParser<InternalKickPlayerMessage>(() => new InternalKickPlayerMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalKickPlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickPlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickPlayerMessage(InternalKickPlayerMessage other) : this() {
      playerSessionId_ = other.playerSessionId_;
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickPlayerMessage Clone() {
      return new InternalKickPlayerMessage(this);
    }

    /// <summary>Field number for the "playerSessionId" field.</summary>
    public const int PlayerSessionIdFieldNumber = 1;
    private ulong playerSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = value;
      }
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 2;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalKickPlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalKickPlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerSessionId != other.PlayerSessionId) return false;
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerSessionId != 0UL) hash ^= PlayerSessionId.GetHashCode();
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerSessionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerSessionId);
      }
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalKickPlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.PlayerSessionId != 0UL) {
        PlayerSessionId = other.PlayerSessionId;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerSessionId = input.ReadUInt64();
            break;
          }
          case 18: {
            GatewayName = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///全部踢下线消息
  /// </summary>
  public sealed partial class InternalKickAllPlayersMessage : pb::IMessage<InternalKickAllPlayersMessage> {
    private static readonly pb::MessageParser<InternalKickAllPlayersMessage> _parser = new pb::MessageParser<InternalKickAllPlayersMessage>(() => new InternalKickAllPlayersMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalKickAllPlayersMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbInternal.PbInternalReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickAllPlayersMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickAllPlayersMessage(InternalKickAllPlayersMessage other) : this() {
      gatewayName_ = other.gatewayName_;
      gameName_ = other.gameName_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalKickAllPlayersMessage Clone() {
      return new InternalKickAllPlayersMessage(this);
    }

    /// <summary>Field number for the "gatewayName" field.</summary>
    public const int GatewayNameFieldNumber = 1;
    private string gatewayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayName {
      get { return gatewayName_; }
      set {
        gatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 2;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalKickAllPlayersMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalKickAllPlayersMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GatewayName != other.GatewayName) return false;
      if (GameName != other.GameName) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GatewayName.Length != 0) hash ^= GatewayName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GatewayName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GatewayName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalKickAllPlayersMessage other) {
      if (other == null) {
        return;
      }
      if (other.GatewayName.Length != 0) {
        GatewayName = other.GatewayName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GatewayName = input.ReadString();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
