// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Packet {

  /// <summary>Holder for reflection information generated from packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxwYWNrZXQucHJvdG8SBnBhY2tldCIqCgVFcnJvchIOCgZmX2NvZGUYASAB",
            "KAUSEQoJZl9tZXNzYWdlGAIgASgJIjsKClBhY2tldEhlYWQSDAoEZl9pZBgB",
            "IAEoBRIOCgZmX3R5cGUYAyABKAkSDwoHZl9tc2dpZBgFIAEoBUILWglwYi9w",
            "YWNrZXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Packet.Error), global::Packet.Error.Parser, new[]{ "FCode", "FMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Packet.PacketHead), global::Packet.PacketHead.Parser, new[]{ "FId", "FType", "FMsgid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// response error 
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Packet.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      fCode_ = other.fCode_;
      fMessage_ = other.fMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "f_code" field.</summary>
    public const int FCodeFieldNumber = 1;
    private int fCode_;
    /// <summary>
    /// 服务器返回的错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FCode {
      get { return fCode_; }
      set {
        fCode_ = value;
      }
    }

    /// <summary>Field number for the "f_message" field.</summary>
    public const int FMessageFieldNumber = 2;
    private string fMessage_ = "";
    /// <summary>
    /// 服务器返回的错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FMessage {
      get { return fMessage_; }
      set {
        fMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FCode != other.FCode) return false;
      if (FMessage != other.FMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FCode != 0) hash ^= FCode.GetHashCode();
      if (FMessage.Length != 0) hash ^= FMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FCode);
      }
      if (FMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FCode);
      }
      if (FMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.FCode != 0) {
        FCode = other.FCode;
      }
      if (other.FMessage.Length != 0) {
        FMessage = other.FMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FCode = input.ReadInt32();
            break;
          }
          case 18: {
            FMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// protobuf packet 
  /// </summary>
  public sealed partial class PacketHead : pb::IMessage<PacketHead> {
    private static readonly pb::MessageParser<PacketHead> _parser = new pb::MessageParser<PacketHead>(() => new PacketHead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Packet.PacketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHead(PacketHead other) : this() {
      fId_ = other.fId_;
      fType_ = other.fType_;
      fMsgid_ = other.fMsgid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHead Clone() {
      return new PacketHead(this);
    }

    /// <summary>Field number for the "f_id" field.</summary>
    public const int FIdFieldNumber = 1;
    private int fId_;
    /// <summary>
    /// 包的唯一ID，由客户端生成，服务器response返回相同ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FId {
      get { return fId_; }
      set {
        fId_ = value;
      }
    }

    /// <summary>Field number for the "f_type" field.</summary>
    public const int FTypeFieldNumber = 3;
    private string fType_ = "";
    /// <summary>
    /// data类型 ([package_name].[message_name])
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FType {
      get { return fType_; }
      set {
        fType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_msgid" field.</summary>
    public const int FMsgidFieldNumber = 5;
    private int fMsgid_;
    /// <summary>
    /// 代替f_type的方案.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FMsgid {
      get { return fMsgid_; }
      set {
        fMsgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FId != other.FId) return false;
      if (FType != other.FType) return false;
      if (FMsgid != other.FMsgid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FId != 0) hash ^= FId.GetHashCode();
      if (FType.Length != 0) hash ^= FType.GetHashCode();
      if (FMsgid != 0) hash ^= FMsgid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FId);
      }
      if (FType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FType);
      }
      if (FMsgid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FMsgid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FId);
      }
      if (FType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FType);
      }
      if (FMsgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FMsgid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketHead other) {
      if (other == null) {
        return;
      }
      if (other.FId != 0) {
        FId = other.FId;
      }
      if (other.FType.Length != 0) {
        FType = other.FType;
      }
      if (other.FMsgid != 0) {
        FMsgid = other.FMsgid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FId = input.ReadInt32();
            break;
          }
          case 26: {
            FType = input.ReadString();
            break;
          }
          case 40: {
            FMsgid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
