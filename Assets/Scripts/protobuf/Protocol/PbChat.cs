// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbChat {

  /// <summary>Holder for reflection information generated from pb_chat.proto</summary>
  public static partial class PbChatReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYl9jaGF0LnByb3RvEgdwYl9jaGF0IqkBCgZBdmF0YXISCwoDdWlkGAEg",
            "ASgDEgwKBG5hbWUYAiABKAkSDQoFbGV2ZWwYAyABKAUSDwoHY2xhc3NJRBgE",
            "IAEoBRIOCgZyYWNlSUQYBSABKAUSDgoGZ2VuZGVyGAYgASgFEg4KBmhhaXJJ",
            "RBgHIAEoBRIOCgZmYWNlSUQYCCABKAUSEwoLaGFpckNvbG9ySUQYCSABKAUS",
            "DwoHbW91bnRJRBgKIAEoBSJRCg1DMlNfSW50ZXJDaGF0EiQKCWNoYXRfdHlw",
            "ZRgBIAEoDjIRLnBiX2NoYXQuQ2hhdFR5cGUSDQoFdG9VSUQYAiABKAMSCwoD",
            "bXNnGAMgASgJIpoBCg1TMkNfSW50ZXJDaGF0EiQKCWNoYXRfdHlwZRgBIAEo",
            "DjIRLnBiX2NoYXQuQ2hhdFR5cGUSIQoIZnJvbVVzZXIYAiABKAsyDy5wYl9j",
            "aGF0LkF2YXRhchILCgNtc2cYAyABKAkSDQoFdG9VSUQYBCABKAMSEQoJdGlt",
            "ZVN0YW1wGAUgASgDEhEKCUNhY2hlZE1zZxgGIAEoCCI2Cg9TMkNfTXVsdGlw",
            "bGVNc2cSIwoDbXNnGAEgAygLMhYucGJfY2hhdC5TMkNfSW50ZXJDaGF0Ih8K",
            "EFMyQ19DbGVhck1lc3NhZ2USCwoDdWlkGAEgASgDKlYKCENoYXRUeXBlEggK",
            "BG5vbmUQABIKCgZzeXN0ZW0QARIJCgV3b3JsZBACEggKBHRlYW0QAxIHCgNw",
            "MnAQBBIJCgVndWlsZBAFEgsKB3RlYW1yZXEQBkIMWgpwYi9wYl9jaGF0YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbChat.ChatType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbChat.Avatar), global::PbChat.Avatar.Parser, new[]{ "Uid", "Name", "Level", "ClassID", "RaceID", "Gender", "HairID", "FaceID", "HairColorID", "MountID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbChat.C2S_InterChat), global::PbChat.C2S_InterChat.Parser, new[]{ "ChatType", "ToUID", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbChat.S2C_InterChat), global::PbChat.S2C_InterChat.Parser, new[]{ "ChatType", "FromUser", "Msg", "ToUID", "TimeStamp", "CachedMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbChat.S2C_MultipleMsg), global::PbChat.S2C_MultipleMsg.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbChat.S2C_ClearMessage), global::PbChat.S2C_ClearMessage.Parser, new[]{ "Uid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChatType {
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("system")] System = 1,
    [pbr::OriginalName("world")] World = 2,
    [pbr::OriginalName("team")] Team = 3,
    [pbr::OriginalName("p2p")] P2P = 4,
    [pbr::OriginalName("guild")] Guild = 5,
    [pbr::OriginalName("teamreq")] Teamreq = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Avatar : pb::IMessage<Avatar> {
    private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbChat.PbChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar(Avatar other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      level_ = other.level_;
      classID_ = other.classID_;
      raceID_ = other.raceID_;
      gender_ = other.gender_;
      hairID_ = other.hairID_;
      faceID_ = other.faceID_;
      hairColorID_ = other.hairColorID_;
      mountID_ = other.mountID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar Clone() {
      return new Avatar(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "classID" field.</summary>
    public const int ClassIDFieldNumber = 4;
    private int classID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClassID {
      get { return classID_; }
      set {
        classID_ = value;
      }
    }

    /// <summary>Field number for the "raceID" field.</summary>
    public const int RaceIDFieldNumber = 5;
    private int raceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaceID {
      get { return raceID_; }
      set {
        raceID_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private int gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "hairID" field.</summary>
    public const int HairIDFieldNumber = 7;
    private int hairID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairID {
      get { return hairID_; }
      set {
        hairID_ = value;
      }
    }

    /// <summary>Field number for the "faceID" field.</summary>
    public const int FaceIDFieldNumber = 8;
    private int faceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceID {
      get { return faceID_; }
      set {
        faceID_ = value;
      }
    }

    /// <summary>Field number for the "hairColorID" field.</summary>
    public const int HairColorIDFieldNumber = 9;
    private int hairColorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairColorID {
      get { return hairColorID_; }
      set {
        hairColorID_ = value;
      }
    }

    /// <summary>Field number for the "mountID" field.</summary>
    public const int MountIDFieldNumber = 10;
    private int mountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MountID {
      get { return mountID_; }
      set {
        mountID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avatar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avatar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (ClassID != other.ClassID) return false;
      if (RaceID != other.RaceID) return false;
      if (Gender != other.Gender) return false;
      if (HairID != other.HairID) return false;
      if (FaceID != other.FaceID) return false;
      if (HairColorID != other.HairColorID) return false;
      if (MountID != other.MountID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ClassID != 0) hash ^= ClassID.GetHashCode();
      if (RaceID != 0) hash ^= RaceID.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (HairID != 0) hash ^= HairID.GetHashCode();
      if (FaceID != 0) hash ^= FaceID.GetHashCode();
      if (HairColorID != 0) hash ^= HairColorID.GetHashCode();
      if (MountID != 0) hash ^= MountID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (ClassID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ClassID);
      }
      if (RaceID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RaceID);
      }
      if (Gender != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gender);
      }
      if (HairID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HairID);
      }
      if (FaceID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FaceID);
      }
      if (HairColorID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HairColorID);
      }
      if (MountID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MountID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ClassID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassID);
      }
      if (RaceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaceID);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (HairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairID);
      }
      if (FaceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceID);
      }
      if (HairColorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairColorID);
      }
      if (MountID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MountID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avatar other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ClassID != 0) {
        ClassID = other.ClassID;
      }
      if (other.RaceID != 0) {
        RaceID = other.RaceID;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.HairID != 0) {
        HairID = other.HairID;
      }
      if (other.FaceID != 0) {
        FaceID = other.FaceID;
      }
      if (other.HairColorID != 0) {
        HairColorID = other.HairColorID;
      }
      if (other.MountID != 0) {
        MountID = other.MountID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            ClassID = input.ReadInt32();
            break;
          }
          case 40: {
            RaceID = input.ReadInt32();
            break;
          }
          case 48: {
            Gender = input.ReadInt32();
            break;
          }
          case 56: {
            HairID = input.ReadInt32();
            break;
          }
          case 64: {
            FaceID = input.ReadInt32();
            break;
          }
          case 72: {
            HairColorID = input.ReadInt32();
            break;
          }
          case 80: {
            MountID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_InterChat : pb::IMessage<C2S_InterChat> {
    private static readonly pb::MessageParser<C2S_InterChat> _parser = new pb::MessageParser<C2S_InterChat>(() => new C2S_InterChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_InterChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbChat.PbChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InterChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InterChat(C2S_InterChat other) : this() {
      chatType_ = other.chatType_;
      toUID_ = other.toUID_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InterChat Clone() {
      return new C2S_InterChat(this);
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::PbChat.ChatType chatType_ = 0;
    /// <summary>
    /// channel type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbChat.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "toUID" field.</summary>
    public const int ToUIDFieldNumber = 2;
    private long toUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToUID {
      get { return toUID_; }
      set {
        toUID_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    ///  chat message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_InterChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_InterChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatType != other.ChatType) return false;
      if (ToUID != other.ToUID) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ToUID != 0L) hash ^= ToUID.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ToUID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ToUID);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ToUID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUID);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_InterChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.ToUID != 0L) {
        ToUID = other.ToUID;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::PbChat.ChatType) input.ReadEnum();
            break;
          }
          case 16: {
            ToUID = input.ReadInt64();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_InterChat : pb::IMessage<S2C_InterChat> {
    private static readonly pb::MessageParser<S2C_InterChat> _parser = new pb::MessageParser<S2C_InterChat>(() => new S2C_InterChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_InterChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbChat.PbChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InterChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InterChat(S2C_InterChat other) : this() {
      chatType_ = other.chatType_;
      FromUser = other.fromUser_ != null ? other.FromUser.Clone() : null;
      msg_ = other.msg_;
      toUID_ = other.toUID_;
      timeStamp_ = other.timeStamp_;
      cachedMsg_ = other.cachedMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InterChat Clone() {
      return new S2C_InterChat(this);
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::PbChat.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbChat.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "fromUser" field.</summary>
    public const int FromUserFieldNumber = 2;
    private global::PbChat.Avatar fromUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbChat.Avatar FromUser {
      get { return fromUser_; }
      set {
        fromUser_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toUID" field.</summary>
    public const int ToUIDFieldNumber = 4;
    private long toUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToUID {
      get { return toUID_; }
      set {
        toUID_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "CachedMsg" field.</summary>
    public const int CachedMsgFieldNumber = 6;
    private bool cachedMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CachedMsg {
      get { return cachedMsg_; }
      set {
        cachedMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_InterChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_InterChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatType != other.ChatType) return false;
      if (!object.Equals(FromUser, other.FromUser)) return false;
      if (Msg != other.Msg) return false;
      if (ToUID != other.ToUID) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (CachedMsg != other.CachedMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (fromUser_ != null) hash ^= FromUser.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (ToUID != 0L) hash ^= ToUID.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (CachedMsg != false) hash ^= CachedMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (fromUser_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FromUser);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (ToUID != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ToUID);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (CachedMsg != false) {
        output.WriteRawTag(48);
        output.WriteBool(CachedMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (fromUser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromUser);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (ToUID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUID);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (CachedMsg != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_InterChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.fromUser_ != null) {
        if (fromUser_ == null) {
          fromUser_ = new global::PbChat.Avatar();
        }
        FromUser.MergeFrom(other.FromUser);
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.ToUID != 0L) {
        ToUID = other.ToUID;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.CachedMsg != false) {
        CachedMsg = other.CachedMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::PbChat.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            if (fromUser_ == null) {
              fromUser_ = new global::PbChat.Avatar();
            }
            input.ReadMessage(fromUser_);
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 32: {
            ToUID = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 48: {
            CachedMsg = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_MultipleMsg : pb::IMessage<S2C_MultipleMsg> {
    private static readonly pb::MessageParser<S2C_MultipleMsg> _parser = new pb::MessageParser<S2C_MultipleMsg>(() => new S2C_MultipleMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MultipleMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbChat.PbChatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MultipleMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MultipleMsg(S2C_MultipleMsg other) : this() {
      msg_ = other.msg_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MultipleMsg Clone() {
      return new S2C_MultipleMsg(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbChat.S2C_InterChat> _repeated_msg_codec
        = pb::FieldCodec.ForMessage(10, global::PbChat.S2C_InterChat.Parser);
    private readonly pbc::RepeatedField<global::PbChat.S2C_InterChat> msg_ = new pbc::RepeatedField<global::PbChat.S2C_InterChat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbChat.S2C_InterChat> Msg {
      get { return msg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MultipleMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MultipleMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!msg_.Equals(other.msg_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= msg_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      msg_.WriteTo(output, _repeated_msg_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += msg_.CalculateSize(_repeated_msg_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MultipleMsg other) {
      if (other == null) {
        return;
      }
      msg_.Add(other.msg_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            msg_.AddEntriesFrom(input, _repeated_msg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ClearMessage : pb::IMessage<S2C_ClearMessage> {
    private static readonly pb::MessageParser<S2C_ClearMessage> _parser = new pb::MessageParser<S2C_ClearMessage>(() => new S2C_ClearMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ClearMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbChat.PbChatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearMessage(S2C_ClearMessage other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearMessage Clone() {
      return new S2C_ClearMessage(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ClearMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ClearMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ClearMessage other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
