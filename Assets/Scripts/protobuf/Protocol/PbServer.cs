// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbServer {

  /// <summary>Holder for reflection information generated from pb_server.proto</summary>
  public static partial class PbServerReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYl9zZXJ2ZXIucHJvdG8SCXBiX3NlcnZlciKuAQoLUzJDX0tpY2tvdXQS",
            "LQoGcmVhc29uGAEgASgOMh0ucGJfc2VydmVyLlMyQ19LaWNrb3V0LlJlYXNv",
            "bhIPCgdtZXNzYWdlGAIgASgJIl8KBlJlYXNvbhIICgROb25lEAASEQoNQnlP",
            "dGhlckNsaWVudBABEggKBEJ5R00QAhIJCgVCeUJhbhADEhEKDUJ5SWRsZVRv",
            "b0xvbmcQBBIQCgxCeURlbGV0ZVJvbGUQBSInCg5TMkNfU2VydmVySW5mbxIV",
            "Cg1jbGllbnRWZXJzaW9uGAEgASgJIrIBCgZOb3RpY2USDQoFdGl0bGUYASAB",
            "KAkSEQoJdGl0bGVUeXBlGAIgASgFEg8KB2NvbnRlbnQYAyABKAkSEAoIcHJp",
            "b3JpdHkYBCABKAUSEgoKYnV0dG9uTmFtZRgFIAEoCRIRCglidXR0b25VcmwY",
            "BiABKAkSCgoCaWQYByABKAkSDAoEdHlwZRgIIAEoBRIRCgliZWdpblRpbWUY",
            "CSABKAMSDwoHZW5kVGltZRgKIAEoAyIQCg5DMlNfTm90aWNlTGlzdCIxCg5T",
            "MkNfTm90aWNlTGlzdBIfCgRsaXN0GAEgAygLMhEucGJfc2VydmVyLk5vdGlj",
            "ZUIOWgxwYi9wYl9zZXJ2ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbServer.S2C_Kickout), global::PbServer.S2C_Kickout.Parser, new[]{ "Reason", "Message" }, null, new[]{ typeof(global::PbServer.S2C_Kickout.Types.Reason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbServer.S2C_ServerInfo), global::PbServer.S2C_ServerInfo.Parser, new[]{ "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbServer.Notice), global::PbServer.Notice.Parser, new[]{ "Title", "TitleType", "Content", "Priority", "ButtonName", "ButtonUrl", "Id", "Type", "BeginTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbServer.C2S_NoticeList), global::PbServer.C2S_NoticeList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbServer.S2C_NoticeList), global::PbServer.S2C_NoticeList.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///踢下线
  /// </summary>
  public sealed partial class S2C_Kickout : pb::IMessage<S2C_Kickout> {
    private static readonly pb::MessageParser<S2C_Kickout> _parser = new pb::MessageParser<S2C_Kickout>(() => new S2C_Kickout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Kickout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbServer.PbServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Kickout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Kickout(S2C_Kickout other) : this() {
      reason_ = other.reason_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Kickout Clone() {
      return new S2C_Kickout(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::PbServer.S2C_Kickout.Types.Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbServer.S2C_Kickout.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Kickout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Kickout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Kickout other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::PbServer.S2C_Kickout.Types.Reason) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_Kickout message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("None")] None = 0,
        /// <summary>
        ///他处登陆
        /// </summary>
        [pbr::OriginalName("ByOtherClient")] ByOtherClient = 1,
        /// <summary>
        /// gm踢下线
        /// </summary>
        [pbr::OriginalName("ByGM")] ByGm = 2,
        /// <summary>
        ///被封禁
        /// </summary>
        [pbr::OriginalName("ByBan")] ByBan = 3,
        /// <summary>
        ///过久不活跃
        /// </summary>
        [pbr::OriginalName("ByIdleTooLong")] ByIdleTooLong = 4,
        /// <summary>
        /// 角色被删除
        /// </summary>
        [pbr::OriginalName("ByDeleteRole")] ByDeleteRole = 5,
      }

    }
    #endregion

  }

  /// <summary>
  ///服务器信息
  /// </summary>
  public sealed partial class S2C_ServerInfo : pb::IMessage<S2C_ServerInfo> {
    private static readonly pb::MessageParser<S2C_ServerInfo> _parser = new pb::MessageParser<S2C_ServerInfo>(() => new S2C_ServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbServer.PbServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerInfo(S2C_ServerInfo other) : this() {
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ServerInfo Clone() {
      return new S2C_ServerInfo(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    /// <summary>
    ///客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 公告
  /// </summary>
  public sealed partial class Notice : pb::IMessage<Notice> {
    private static readonly pb::MessageParser<Notice> _parser = new pb::MessageParser<Notice>(() => new Notice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbServer.PbServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice(Notice other) : this() {
      title_ = other.title_;
      titleType_ = other.titleType_;
      content_ = other.content_;
      priority_ = other.priority_;
      buttonName_ = other.buttonName_;
      buttonUrl_ = other.buttonUrl_;
      id_ = other.id_;
      type_ = other.type_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice Clone() {
      return new Notice(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "titleType" field.</summary>
    public const int TitleTypeFieldNumber = 2;
    private int titleType_;
    /// <summary>
    /// 0文本，1 url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleType {
      get { return titleType_; }
      set {
        titleType_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private int priority_;
    /// <summary>
    /// 公告优先级，值越小优先级越高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "buttonName" field.</summary>
    public const int ButtonNameFieldNumber = 5;
    private string buttonName_ = "";
    /// <summary>
    /// 按钮名字 为空则不显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ButtonName {
      get { return buttonName_; }
      set {
        buttonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buttonUrl" field.</summary>
    public const int ButtonUrlFieldNumber = 6;
    private string buttonUrl_ = "";
    /// <summary>
    /// 点击按钮跳转url，如果按钮名字不为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ButtonUrl {
      get { return buttonUrl_; }
      set {
        buttonUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private string id_ = "";
    /// <summary>
    /// 通知id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    /// <summary>
    /// 1为每次登录时弹、2为每天在第一次登录时弹一次、3为整个有效时间周期里只弹一次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 9;
    private long beginTime_;
    /// <summary>
    /// unix 时间戳 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 10;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (TitleType != other.TitleType) return false;
      if (Content != other.Content) return false;
      if (Priority != other.Priority) return false;
      if (ButtonName != other.ButtonName) return false;
      if (ButtonUrl != other.ButtonUrl) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (TitleType != 0) hash ^= TitleType.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (ButtonName.Length != 0) hash ^= ButtonName.GetHashCode();
      if (ButtonUrl.Length != 0) hash ^= ButtonUrl.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (BeginTime != 0L) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (TitleType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TitleType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (ButtonName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ButtonName);
      }
      if (ButtonUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ButtonUrl);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (BeginTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(BeginTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (TitleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (ButtonName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ButtonName);
      }
      if (ButtonUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ButtonUrl);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (BeginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.TitleType != 0) {
        TitleType = other.TitleType;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.ButtonName.Length != 0) {
        ButtonName = other.ButtonName;
      }
      if (other.ButtonUrl.Length != 0) {
        ButtonUrl = other.ButtonUrl;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.BeginTime != 0L) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 16: {
            TitleType = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 42: {
            ButtonName = input.ReadString();
            break;
          }
          case 50: {
            ButtonUrl = input.ReadString();
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 72: {
            BeginTime = input.ReadInt64();
            break;
          }
          case 80: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_NoticeList : pb::IMessage<C2S_NoticeList> {
    private static readonly pb::MessageParser<C2S_NoticeList> _parser = new pb::MessageParser<C2S_NoticeList>(() => new C2S_NoticeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_NoticeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbServer.PbServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_NoticeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_NoticeList(C2S_NoticeList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_NoticeList Clone() {
      return new C2S_NoticeList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_NoticeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_NoticeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_NoticeList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_NoticeList : pb::IMessage<S2C_NoticeList> {
    private static readonly pb::MessageParser<S2C_NoticeList> _parser = new pb::MessageParser<S2C_NoticeList>(() => new S2C_NoticeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_NoticeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbServer.PbServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NoticeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NoticeList(S2C_NoticeList other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_NoticeList Clone() {
      return new S2C_NoticeList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbServer.Notice> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbServer.Notice.Parser);
    private readonly pbc::RepeatedField<global::PbServer.Notice> list_ = new pbc::RepeatedField<global::PbServer.Notice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbServer.Notice> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_NoticeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_NoticeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_NoticeList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
